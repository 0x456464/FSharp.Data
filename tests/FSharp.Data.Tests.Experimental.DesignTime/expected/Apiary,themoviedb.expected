class ApiaryProvider : FDR.ApiaryContext
    new : rootUrl:string -> ApiaryProvider
    (new ApiaryContext(rootUrl))

    member Account: ApiaryProvider+DomainTypes+Account with get
    (this :> InternalApiaryContext)

    member AsyncConfiguration: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Configuration async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = (this :> InternalApiaryContext)
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/configuration"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Authentication: ApiaryProvider+DomainTypes+Authentication with get
    (this :> InternalApiaryContext)

    member Collection: ApiaryProvider+DomainTypes+Collection with get
    (this :> InternalApiaryContext)

    member Company: ApiaryProvider+DomainTypes+Company with get
    (this :> InternalApiaryContext)

    member Configuration: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Configuration
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/configuration"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Discover: ApiaryProvider+DomainTypes+Discover with get
    (this :> InternalApiaryContext)

    member Genre: ApiaryProvider+DomainTypes+Genre2 with get
    (this :> InternalApiaryContext)

    member Job: ApiaryProvider+DomainTypes+Job with get
    (this :> InternalApiaryContext)

    member Keyword: ApiaryProvider+DomainTypes+Keyword2 with get
    (this :> InternalApiaryContext)

    member List: ApiaryProvider+DomainTypes+List with get
    (this :> InternalApiaryContext)

    member Movie: ApiaryProvider+DomainTypes+Movie with get
    (this :> InternalApiaryContext)

    member Person: ApiaryProvider+DomainTypes+Person with get
    (this :> InternalApiaryContext)

    member Review: ApiaryProvider+DomainTypes+Review with get
    (this :> InternalApiaryContext)

    member Search: ApiaryProvider+DomainTypes+Search with get
    (this :> InternalApiaryContext)


class ApiaryProvider+DomainTypes+Account : FDR.InternalApiaryContext
    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+AccountList async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/account"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+AccountList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/account"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Authentication : FDR.InternalApiaryContext
    member GuestSession: ApiaryProvider+DomainTypes+GuestSession with get
    this

    member Session: ApiaryProvider+DomainTypes+Session with get
    this

    member Token: ApiaryProvider+DomainTypes+Token with get
    this


class ApiaryProvider+DomainTypes+Collection : FDR.InternalApiaryContext
    member AsyncGetCollection: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Collection2 async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/collection/{id}"
                                          Arguments = [| ("{id}",
                                                          id) |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member GetCollection: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Collection2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/collection/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Company : FDR.InternalApiaryContext
    member AsyncGetCompany: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Company2 async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/company/{id}"
                                          Arguments = [| ("{id}",
                                                          id) |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member GetCompany: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Company2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/company/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Configuration : FDR.IJsonDocument
    member ChangeKeys: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "change_keys"), new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                                                  let value = Some t.JsonValue
                                                                                                  JsonRuntime.GetNonOptionalValue("change_key", JsonRuntime.ConvertString("", value), value)))

    member Images: ApiaryProvider+DomainTypes+Images with get
    JsonRuntime.GetPropertyPacked(this, "images")


class ApiaryProvider+DomainTypes+Discover : FDR.InternalApiaryContext
    member AsyncMovie: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+DiscoverMovie async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/discover/movie"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Movie: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+DiscoverMovie
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/discover/movie"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes

class ApiaryProvider+DomainTypes+Genre2 : FDR.InternalApiaryContext
    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+GenreList async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/genre/list"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Id: ApiaryProvider+DomainTypes+Id with get
    this

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+GenreList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/genre/list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Job : FDR.InternalApiaryContext
    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+JobList async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/job/list"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+JobList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/job/list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Keyword2 : FDR.InternalApiaryContext
    member AsyncGetKeyword: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Keyword3 async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/keyword/{id}"
                                          Arguments = [| ("{id}",
                                                          id) |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member GetKeyword: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Keyword3
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/keyword/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+List : FDR.InternalApiaryContext
    member AsyncGetList: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+List2 async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/list/{id}"
                                          Arguments = [| ("{id}",
                                                          id) |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member GetList: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+List2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/list/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Movie : FDR.InternalApiaryContext
    member AsyncChanges: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieChanges2 async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/changes"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncGetMovie: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Movie2 async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}"
                                          Arguments = [| ("{id}",
                                                          id) |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncLatest: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieLatest async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/latest"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncNowPlaying: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieNowPlaying async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/now_playing"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncPopular: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MoviePopular async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/popular"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncTopRated: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieTopRated async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/top_rated"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncUpcoming: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieUpcoming async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/upcoming"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Changes: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieChanges2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/changes"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member GetMovie: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Movie2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Latest: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieLatest
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/latest"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member NowPlaying: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieNowPlaying
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/now_playing"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Popular: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MoviePopular
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/popular"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member TopRated: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieTopRated
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/top_rated"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Upcoming: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieUpcoming
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/upcoming"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Person : FDR.InternalApiaryContext
    member AsyncChanges: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonChanges2 async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/person/changes"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncGetPerson: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Person2 async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/person/{id}"
                                          Arguments = [| ("{id}",
                                                          id) |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncLatest: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonLatest async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/person/latest"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncPopular: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonPopular async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/person/popular"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Changes: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonChanges2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/changes"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member GetPerson: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+Person2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Latest: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonLatest
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/latest"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Popular: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonPopular
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/popular"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Review : FDR.InternalApiaryContext
    member AsyncId: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+ReviewId async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/review/{id}"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Id: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+ReviewId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/review/{id}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Search : FDR.InternalApiaryContext
    member AsyncCollection: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchCollection async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/search/collection"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncCompany: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchCompany async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/search/company"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncKeyword: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchKeyword async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/search/keyword"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchList async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/search/list"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncMovie: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchMovie async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/search/movie"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncPerson: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchPerson async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/search/person"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Collection: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchCollection
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/collection"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Company: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchCompany
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/company"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Keyword: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchKeyword
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/keyword"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Movie: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchMovie
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/movie"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Person: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+SearchPerson
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/search/person"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+AccountList : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member IncludeAdult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "include_adult")
    JsonRuntime.GetNonOptionalValue("include_adult", JsonRuntime.ConvertBoolean("", value), value)

    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue("iso_3166_1", JsonRuntime.ConvertString("", value), value)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member Username: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "username")
    JsonRuntime.GetNonOptionalValue("username", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Collection2 : FDR.IJsonDocument
    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+CollectionImages async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/collection/{id}/images"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+CollectionImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/collection/{id}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member Parts: ApiaryProvider+DomainTypes+Part[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "parts"), new Func<_,_>(id)))

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Company2 : FDR.IJsonDocument
    member AsyncMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+CompanyMovies async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/company/{id}/movies"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Description: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "description")

    member Headquarters: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "headquarters")
    JsonRuntime.GetNonOptionalValue("headquarters", JsonRuntime.ConvertString("", value), value)

    member Homepage: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "homepage")
    JsonRuntime.GetNonOptionalValue("homepage", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member LogoPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "logo_path")
    JsonRuntime.GetNonOptionalValue("logo_path", JsonRuntime.ConvertString("", value), value)

    member Movies: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+CompanyMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/company/{id}/movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member ParentCompany: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "parent_company")


class ApiaryProvider+DomainTypes+DiscoverMovie : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result14[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+GenreList : FDR.IJsonDocument
    member Genres: ApiaryProvider+DomainTypes+Genre3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "genres"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+GuestSession : FDR.InternalApiaryContext
    member AsyncNew: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+AuthenticationGuestSessionNew async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/authentication/guest_session/new"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member New: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+AuthenticationGuestSessionNew
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/authentication/guest_session/new"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Id : FDR.InternalApiaryContext
    member AsyncMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+GenreIdMovies async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/genre/{id}/movies"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Movies: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+GenreIdMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/genre/{id}/movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Images : FDR.IJsonDocument
    member BackdropSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "backdrop_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                                                     let value = Some t.JsonValue
                                                                                                     JsonRuntime.GetNonOptionalValue("backdrop_size", JsonRuntime.ConvertString("", value), value)))

    member BaseUrl: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "base_url")
    JsonRuntime.GetNonOptionalValue("base_url", JsonRuntime.ConvertString("", value), value)

    member LogoSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "logo_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                                                 let value = Some t.JsonValue
                                                                                                 JsonRuntime.GetNonOptionalValue("logo_size", JsonRuntime.ConvertString("", value), value)))

    member PosterSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "poster_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                                                   let value = Some t.JsonValue
                                                                                                   JsonRuntime.GetNonOptionalValue("poster_size", JsonRuntime.ConvertString("", value), value)))

    member ProfileSizes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "profile_sizes"), new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                                                    let value = Some t.JsonValue
                                                                                                    JsonRuntime.GetNonOptionalValue("profile_size", JsonRuntime.ConvertString("", value), value)))

    member SecureBaseUrl: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "secure_base_url")
    JsonRuntime.GetNonOptionalValue("secure_base_url", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+JobList : FDR.IJsonDocument
    member Jobs: ApiaryProvider+DomainTypes+Job2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "jobs"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+Keyword3 : FDR.IJsonDocument
    member AsyncMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+KeywordMovies async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/keyword/{id}/movies"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Movies: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+KeywordMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/keyword/{id}/movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+List2 : FDR.IJsonDocument
    member AddItem: query:string * string list -> headers:string * string list -> FDR.ApiaryDocument
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json
Content-Type:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/3/list/{id}/add_item"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member AsyncAddItem: query:string * string list -> headers:string * string list -> FDR.ApiaryDocument async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json
Content-Type:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "POST"
                                          Path = "/3/list/{id}/add_item"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncItemStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+ListItemStatus async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/list/{id}/item_status"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncRemoveItem: query:string * string list -> headers:string * string list -> FDR.ApiaryDocument async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json
Content-Type:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "POST"
                                          Path = "/3/list/{id}/remove_item"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member CreatedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "created_by")
    JsonRuntime.GetNonOptionalValue("created_by", JsonRuntime.ConvertString("", value), value)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "description")
    JsonRuntime.GetNonOptionalValue("description", JsonRuntime.ConvertString("", value), value)

    member FavoriteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "favorite_count")
    JsonRuntime.GetNonOptionalValue("favorite_count", JsonRuntime.ConvertInteger("", value), value)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member ItemCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "item_count")
    JsonRuntime.GetNonOptionalValue("item_count", JsonRuntime.ConvertInteger("", value), value)

    member ItemStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+ListItemStatus
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/list/{id}/item_status"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Items: ApiaryProvider+DomainTypes+Item3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "items"), new Func<_,_>(id)))

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member RemoveItem: query:string * string list -> headers:string * string list -> FDR.ApiaryDocument
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json
Content-Type:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/3/list/{id}/remove_item"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Movie2 : FDR.IJsonDocument
    member AccountStates: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieAccountStates
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/account_states"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member AlternativeTitles: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieAlternativeTitles
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/alternative_titles"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member AsyncAccountStates: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieAccountStates async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/account_states"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncAlternativeTitles: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieAlternativeTitles async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/alternative_titles"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncCasts: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieCasts async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/casts"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncChanges: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieChanges async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/changes"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieImages async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/images"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncKeywords: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieKeywords async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/keywords"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncLists: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieLists async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/lists"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncRating: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieRating async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json
Content-Type:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "POST"
                                          Path = "/3/movie/{id}/rating"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncReleases: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieReleases async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/releases"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncReviews: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieReviews async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/reviews"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncSimilarMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieSimilarMovies async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/similar_movies"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncTrailers: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieTrailers async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/trailers"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncTranslations: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieTranslations async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/movie/{id}/translations"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member BelongsToCollection: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "belongs_to_collection")

    member Budget: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "budget")
    JsonRuntime.GetNonOptionalValue("budget", JsonRuntime.ConvertInteger("", value), value)

    member Casts: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieCasts
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/casts"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Changes: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieChanges
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/changes"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Genres: ApiaryProvider+DomainTypes+Genre[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "genres"), new Func<_,_>(id)))

    member Homepage: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "homepage")
    JsonRuntime.GetNonOptionalValue("homepage", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member ImdbId: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "imdb_id")
    JsonRuntime.GetNonOptionalValue("imdb_id", JsonRuntime.ConvertString("", value), value)

    member Keywords: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieKeywords
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/keywords"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Lists: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieLists
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/lists"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member Overview: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "overview")
    JsonRuntime.GetNonOptionalValue("overview", JsonRuntime.ConvertString("", value), value)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "popularity")
    JsonRuntime.GetNonOptionalValue("popularity", JsonRuntime.ConvertDecimal("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ProductionCompanies: ApiaryProvider+DomainTypes+ProductionCompany[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "production_companies"), new Func<_,_>(id)))

    member ProductionCountries: ApiaryProvider+DomainTypes+ProductionCountry[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "production_countries"), new Func<_,_>(id)))

    member Rating: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieRating
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json
Content-Type:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/3/movie/{id}/rating"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Releases: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieReleases
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/releases"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Revenue: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "revenue")
    JsonRuntime.GetNonOptionalValue("revenue", JsonRuntime.ConvertInteger("", value), value)

    member Reviews: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieReviews
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/reviews"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Runtime: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "runtime")
    JsonRuntime.GetNonOptionalValue("runtime", JsonRuntime.ConvertInteger("", value), value)

    member SimilarMovies: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieSimilarMovies
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/similar_movies"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member SpokenLanguages: ApiaryProvider+DomainTypes+SpokenLanguage[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "spoken_languages"), new Func<_,_>(id)))

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "status")
    JsonRuntime.GetNonOptionalValue("status", JsonRuntime.ConvertString("", value), value)

    member Tagline: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "tagline")
    JsonRuntime.GetNonOptionalValue("tagline", JsonRuntime.ConvertString("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member Trailers: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieTrailers
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/trailers"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Translations: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+MovieTranslations
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/movie/{id}/translations"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieChanges2 : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result8[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieLatest : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member BackdropPath: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "backdrop_path")

    member BelongsToCollection: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "belongs_to_collection")

    member Budget: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "budget")
    JsonRuntime.GetNonOptionalValue("budget", JsonRuntime.ConvertInteger("", value), value)

    member Genres: ApiaryProvider+DomainTypes+GenresChoice with get
    JsonRuntime.GetPropertyPacked(this, "genres")

    member Homepage: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "homepage")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member ImdbId: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "imdb_id")
    JsonRuntime.GetNonOptionalValue("imdb_id", JsonRuntime.ConvertString("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member Overview: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "overview")

    member Popularity: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "popularity")
    JsonRuntime.GetNonOptionalValue("popularity", JsonRuntime.ConvertInteger("", value), value)

    member PosterPath: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "poster_path")

    member ProductionCompanies: ApiaryProvider+DomainTypes+ProductionCompany2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "production_companies"), new Func<_,_>(id)))

    member ProductionCountries: ApiaryProvider+DomainTypes+ProductionCountry2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "production_countries"), new Func<_,_>(id)))

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Revenue: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "revenue")
    JsonRuntime.GetNonOptionalValue("revenue", JsonRuntime.ConvertInteger("", value), value)

    member Runtime: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "runtime")

    member SpokenLanguages: ApiaryProvider+DomainTypes+SpokenLanguage2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "spoken_languages"), new Func<_,_>(id)))

    member Tagline: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "tagline")

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertInteger("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieNowPlaying : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result5[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MoviePopular : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result6[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieTopRated : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result7[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieUpcoming : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result4[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Person2 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member AlsoKnownAs: ApiaryProvider+DomainTypes+AlsoKnownAsChoice with get
    JsonRuntime.GetPropertyPacked(this, "also_known_as")

    member AsyncChanges: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonChanges async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/person/{id}/changes"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncCredits: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonCredits async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/person/{id}/credits"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member AsyncImages: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonImages async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/person/{id}/images"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member Biography: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "biography")
    JsonRuntime.GetNonOptionalValue("biography", JsonRuntime.ConvertString("", value), value)

    member Birthday: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "birthday")
    JsonRuntime.GetNonOptionalValue("birthday", JsonRuntime.ConvertDateTime("", value), value)

    member Changes: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonChanges
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/changes"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Credits: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonCredits
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/credits"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Deathday: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "deathday")
    JsonRuntime.GetNonOptionalValue("deathday", JsonRuntime.ConvertString("", value), value)

    member Homepage: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "homepage")
    JsonRuntime.GetNonOptionalValue("homepage", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Images: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+PersonImages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/person/{id}/images"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member PlaceOfBirth: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "place_of_birth")
    JsonRuntime.GetNonOptionalValue("place_of_birth", JsonRuntime.ConvertString("", value), value)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "profile_path")
    JsonRuntime.GetNonOptionalValue("profile_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+PersonChanges2 : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result10[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+PersonLatest : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member AlsoKnownAs: ApiaryProvider+DomainTypes+AlsoKnownAsChoice2 with get
    JsonRuntime.GetPropertyPacked(this, "also_known_as")

    member Biography: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "biography")

    member Birthday: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "birthday")

    member Deathday: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "deathday")

    member Homepage: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "homepage")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member PlaceOfBirth: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "place_of_birth")

    member ProfilePath: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "profile_path")


class ApiaryProvider+DomainTypes+PersonPopular : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result9[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+ReviewId : FDR.IJsonDocument
    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "author")
    JsonRuntime.GetNonOptionalValue("author", JsonRuntime.ConvertString("", value), value)

    member Content: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "content")
    JsonRuntime.GetNonOptionalValue("content", JsonRuntime.ConvertString("", value), value)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member MediaId: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "media_id")
    JsonRuntime.GetNonOptionalValue("media_id", JsonRuntime.ConvertInteger("", value), value)

    member MediaTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "media_title")
    JsonRuntime.GetNonOptionalValue("media_title", JsonRuntime.ConvertString("", value), value)

    member MediaType: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "media_type")
    JsonRuntime.GetNonOptionalValue("media_type", JsonRuntime.ConvertString("", value), value)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "url")
    JsonRuntime.GetNonOptionalValue("url", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+SearchCollection : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result16[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+SearchCompany : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result19[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+SearchKeyword : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result20[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+SearchList : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result18[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+SearchMovie : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result15[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+SearchPerson : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result17[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Session : FDR.InternalApiaryContext
    member AsyncNew: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+AuthenticationSessionNew async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/authentication/session/new"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member New: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+AuthenticationSessionNew
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/authentication/session/new"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+Token : FDR.InternalApiaryContext
    member AsyncNew: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+AuthenticationTokenNew async
    ApiaryGenerationHelper.AsyncMap(let patternInput = 
                                        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                        let query, headers = patternInput
                                        let apiCtx = this
                                        (apiCtx :> ApiaryOperations),
                                        { Method = "GET"
                                          Path = "/3/authentication/token/new"
                                          Arguments = [| |]
                                          Headers = headers
                                          Query = query }
                                    let args, apiCtx = patternInput
                                    apiCtx.AsyncInvokeOperation(args), new Func<_,_>(id)))

    member New: query:string * string list -> headers:string * string list -> ApiaryProvider+DomainTypes+AuthenticationTokenNew
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let query, headers = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/3/authentication/token/new"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let args, apiCtx = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DomainTypes+AlsoKnownAsChoice : FDR.IJsonDocument

class ApiaryProvider+DomainTypes+AlsoKnownAsChoice2 : FDR.IJsonDocument

class ApiaryProvider+DomainTypes+AuthenticationGuestSessionNew : FDR.IJsonDocument
    member ExpiresAt: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "expires_at")
    JsonRuntime.GetNonOptionalValue("expires_at", JsonRuntime.ConvertString("", value), value)

    member GuestSessionId: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "guest_session_id")
    JsonRuntime.GetNonOptionalValue("guest_session_id", JsonRuntime.ConvertString("", value), value)

    member Success: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "success")
    JsonRuntime.GetNonOptionalValue("success", JsonRuntime.ConvertBoolean("", value), value)


class ApiaryProvider+DomainTypes+AuthenticationSessionNew : FDR.IJsonDocument
    member SessionId: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "session_id")
    JsonRuntime.GetNonOptionalValue("session_id", JsonRuntime.ConvertString("", value), value)

    member Success: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "success")
    JsonRuntime.GetNonOptionalValue("success", JsonRuntime.ConvertBoolean("", value), value)


class ApiaryProvider+DomainTypes+AuthenticationTokenNew : FDR.IJsonDocument
    member ExpiresAt: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "expires_at")
    JsonRuntime.GetNonOptionalValue("expires_at", JsonRuntime.ConvertString("", value), value)

    member RequestToken: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "request_token")
    JsonRuntime.GetNonOptionalValue("request_token", JsonRuntime.ConvertString("", value), value)

    member Success: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "success")
    JsonRuntime.GetNonOptionalValue("success", JsonRuntime.ConvertBoolean("", value), value)


class ApiaryProvider+DomainTypes+CollectionImages : FDR.IJsonDocument
    member Backdrops: ApiaryProvider+DomainTypes+Backdrop2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "backdrops"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Posters: ApiaryProvider+DomainTypes+Poster2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "posters"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+CompanyMovies : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result11[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Genre : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Genre3 : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+GenreIdMovies : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result12[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+GenresChoice : FDR.IJsonDocument

class ApiaryProvider+DomainTypes+Item3 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Job2 : FDR.IJsonDocument
    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "department")
    JsonRuntime.GetNonOptionalValue("department", JsonRuntime.ConvertString("", value), value)

    member JobList: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "job_list"), new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                                               let value = Some t.JsonValue
                                                                                               JsonRuntime.GetNonOptionalValue("job_list", JsonRuntime.ConvertString("", value), value)))


class ApiaryProvider+DomainTypes+KeywordMovies : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result13[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+ListItemStatus : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member ItemPresent: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "item_present")
    JsonRuntime.GetNonOptionalValue("item_present", JsonRuntime.ConvertBoolean("", value), value)


class ApiaryProvider+DomainTypes+MovieAccountStates : FDR.IJsonDocument
    member Favorite: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "favorite")
    JsonRuntime.GetNonOptionalValue("favorite", JsonRuntime.ConvertBoolean("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Rated: ApiaryProvider+DomainTypes+Rated with get
    JsonRuntime.GetPropertyPacked(this, "rated")

    member Watchlist: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "watchlist")
    JsonRuntime.GetNonOptionalValue("watchlist", JsonRuntime.ConvertBoolean("", value), value)


class ApiaryProvider+DomainTypes+MovieAlternativeTitles : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Titles: ApiaryProvider+DomainTypes+Title[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "titles"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+MovieCasts : FDR.IJsonDocument
    member Cast: ApiaryProvider+DomainTypes+Cast[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "cast"), new Func<_,_>(id)))

    member Crew: ApiaryProvider+DomainTypes+Crew[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "crew"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieChanges : FDR.IJsonDocument
    member Changes: ApiaryProvider+DomainTypes+Change[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "changes"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+MovieImages : FDR.IJsonDocument
    member Backdrops: ApiaryProvider+DomainTypes+Backdrop[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "backdrops"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Posters: ApiaryProvider+DomainTypes+Poster[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "posters"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+MovieKeywords : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Keywords: ApiaryProvider+DomainTypes+Keyword[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "keywords"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+MovieLists : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieRating : FDR.IJsonDocument
    member StatusCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "status_code")
    JsonRuntime.GetNonOptionalValue("status_code", JsonRuntime.ConvertInteger("", value), value)

    member StatusMessage: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "status_message")
    JsonRuntime.GetNonOptionalValue("status_message", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+MovieReleases : FDR.IJsonDocument
    member Countries: ApiaryProvider+DomainTypes+Country[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "countries"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieReviews : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieSimilarMovies : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Results: ApiaryProvider+DomainTypes+Result[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member TotalPages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_pages")
    JsonRuntime.GetNonOptionalValue("total_pages", JsonRuntime.ConvertInteger("", value), value)

    member TotalResults: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total_results")
    JsonRuntime.GetNonOptionalValue("total_results", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+MovieTrailers : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Quicktime: ApiaryProvider+DomainTypes+QuicktimeChoice with get
    JsonRuntime.GetPropertyPacked(this, "quicktime")

    member Youtube: ApiaryProvider+DomainTypes+Youtube[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "youtube"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+MovieTranslations : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Translations: ApiaryProvider+DomainTypes+Translation[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "translations"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+Part : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+PersonChanges : FDR.IJsonDocument
    member Changes: ApiaryProvider+DomainTypes+Change2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "changes"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+PersonCredits : FDR.IJsonDocument
    member Cast: ApiaryProvider+DomainTypes+Cast2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "cast"), new Func<_,_>(id)))

    member Crew: ApiaryProvider+DomainTypes+Crew2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "crew"), new Func<_,_>(id)))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+PersonImages : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Profiles: ApiaryProvider+DomainTypes+Profile[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "profiles"), new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+ProductionCompany : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+ProductionCompany2 : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+ProductionCountry : FDR.IJsonDocument
    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue("iso_3166_1", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+ProductionCountry2 : FDR.IJsonDocument
    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue("iso_3166_1", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Result10 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result14 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "popularity")
    JsonRuntime.GetNonOptionalValue("popularity", JsonRuntime.ConvertDecimal("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertInteger("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result15 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "popularity")
    JsonRuntime.GetNonOptionalValue("popularity", JsonRuntime.ConvertDecimal("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: ApiaryProvider+DomainTypes+ReleaseDateChoice4 with get
    JsonRuntime.GetPropertyPacked(this, "release_date")

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result16 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Result17 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "profile_path")
    JsonRuntime.GetNonOptionalValue("profile_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Result18 : FDR.IJsonDocument
    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "description")
    JsonRuntime.GetNonOptionalValue("description", JsonRuntime.ConvertString("", value), value)

    member FavoriteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "favorite_count")
    JsonRuntime.GetNonOptionalValue("favorite_count", JsonRuntime.ConvertInteger("", value), value)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member ItemCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "item_count")
    JsonRuntime.GetNonOptionalValue("item_count", JsonRuntime.ConvertInteger("", value), value)

    member ListType: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "list_type")
    JsonRuntime.GetNonOptionalValue("list_type", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Result19 : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member LogoPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "logo_path")
    JsonRuntime.GetNonOptionalValue("logo_path", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Result20 : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Result4 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result5 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result6 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member Popularity: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "popularity")
    JsonRuntime.GetNonOptionalValue("popularity", JsonRuntime.ConvertDecimal("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result7 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result8 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result9 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "profile_path")
    JsonRuntime.GetNonOptionalValue("profile_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+SpokenLanguage : FDR.IJsonDocument
    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+SpokenLanguage2 : FDR.IJsonDocument
    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Backdrop : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue("aspect_ratio", JsonRuntime.ConvertDecimal("", value), value)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "file_path")
    JsonRuntime.GetNonOptionalValue("file_path", JsonRuntime.ConvertString("", value), value)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "height")
    JsonRuntime.GetNonOptionalValue("height", JsonRuntime.ConvertInteger("", value), value)

    member Iso6391: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "iso_639_1")

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "width")
    JsonRuntime.GetNonOptionalValue("width", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Backdrop2 : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue("aspect_ratio", JsonRuntime.ConvertDecimal("", value), value)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "file_path")
    JsonRuntime.GetNonOptionalValue("file_path", JsonRuntime.ConvertString("", value), value)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "height")
    JsonRuntime.GetNonOptionalValue("height", JsonRuntime.ConvertInteger("", value), value)

    member Iso6391: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "iso_639_1")

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "width")
    JsonRuntime.GetNonOptionalValue("width", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Cast : FDR.IJsonDocument
    member Character: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "character")
    JsonRuntime.GetNonOptionalValue("character", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member Order: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "order")
    JsonRuntime.GetNonOptionalValue("order", JsonRuntime.ConvertInteger("", value), value)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "profile_path")
    JsonRuntime.GetNonOptionalValue("profile_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Cast2 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member Character: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "character")
    JsonRuntime.GetNonOptionalValue("character", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: ApiaryProvider+DomainTypes+OriginalTitleChoice with get
    JsonRuntime.GetPropertyPacked(this, "original_title")

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: ApiaryProvider+DomainTypes+ReleaseDateChoice with get
    JsonRuntime.GetPropertyPacked(this, "release_date")

    member Title: ApiaryProvider+DomainTypes+TitleChoice with get
    JsonRuntime.GetPropertyPacked(this, "title")


class ApiaryProvider+DomainTypes+Change : FDR.IJsonDocument
    member Items: ApiaryProvider+DomainTypes+Item[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "items"), new Func<_,_>(id)))

    member Key: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "key")
    JsonRuntime.GetNonOptionalValue("key", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Change2 : FDR.IJsonDocument
    member Items: ApiaryProvider+DomainTypes+Item2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "items"), new Func<_,_>(id)))

    member Key: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "key")
    JsonRuntime.GetNonOptionalValue("key", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Country : FDR.IJsonDocument
    member Certification: ApiaryProvider+DomainTypes+CertificationChoice with get
    JsonRuntime.GetPropertyPacked(this, "certification")

    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue("iso_3166_1", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)


class ApiaryProvider+DomainTypes+Crew : FDR.IJsonDocument
    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "department")
    JsonRuntime.GetNonOptionalValue("department", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Job: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "job")
    JsonRuntime.GetNonOptionalValue("job", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member ProfilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "profile_path")
    JsonRuntime.GetNonOptionalValue("profile_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Crew2 : FDR.IJsonDocument
    member Adult: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "adult")
    JsonRuntime.GetNonOptionalValue("adult", JsonRuntime.ConvertBoolean("", value), value)

    member Department: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "department")
    JsonRuntime.GetNonOptionalValue("department", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Job: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "job")
    JsonRuntime.GetNonOptionalValue("job", JsonRuntime.ConvertString("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: ApiaryProvider+DomainTypes+ReleaseDateChoice2 with get
    JsonRuntime.GetPropertyPacked(this, "release_date")

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Keyword : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Poster : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue("aspect_ratio", JsonRuntime.ConvertDecimal("", value), value)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "file_path")
    JsonRuntime.GetNonOptionalValue("file_path", JsonRuntime.ConvertString("", value), value)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "height")
    JsonRuntime.GetNonOptionalValue("height", JsonRuntime.ConvertInteger("", value), value)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "width")
    JsonRuntime.GetNonOptionalValue("width", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Poster2 : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue("aspect_ratio", JsonRuntime.ConvertDecimal("", value), value)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "file_path")
    JsonRuntime.GetNonOptionalValue("file_path", JsonRuntime.ConvertString("", value), value)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "height")
    JsonRuntime.GetNonOptionalValue("height", JsonRuntime.ConvertInteger("", value), value)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "width")
    JsonRuntime.GetNonOptionalValue("width", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Profile : FDR.IJsonDocument
    member AspectRatio: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "aspect_ratio")
    JsonRuntime.GetNonOptionalValue("aspect_ratio", JsonRuntime.ConvertDecimal("", value), value)

    member FilePath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "file_path")
    JsonRuntime.GetNonOptionalValue("file_path", JsonRuntime.ConvertString("", value), value)

    member Height: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "height")
    JsonRuntime.GetNonOptionalValue("height", JsonRuntime.ConvertInteger("", value), value)

    member Iso6391: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "iso_639_1")

    member Width: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "width")
    JsonRuntime.GetNonOptionalValue("width", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+QuicktimeChoice : FDR.IJsonDocument

class ApiaryProvider+DomainTypes+Rated : FDR.IJsonDocument
    member Value: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "value")
    JsonRuntime.GetNonOptionalValue("value", JsonRuntime.ConvertDecimal("", value), value)


class ApiaryProvider+DomainTypes+ReleaseDateChoice4 : FDR.IJsonDocument
    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                        let value = Some t.JsonValue
                                                                        JsonRuntime.GetNonOptionalValue("release_dateChoice1of1", JsonRuntime.ConvertDateTime("", value), value)))


class ApiaryProvider+DomainTypes+Result : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result11 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: ApiaryProvider+DomainTypes+ReleaseDateChoice3 with get
    JsonRuntime.GetPropertyPacked(this, "release_date")

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result12 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result13 : FDR.IJsonDocument
    member BackdropPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "backdrop_path")
    JsonRuntime.GetNonOptionalValue("backdrop_path", JsonRuntime.ConvertString("", value), value)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertInteger("", value), value)

    member OriginalTitle: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "original_title")
    JsonRuntime.GetNonOptionalValue("original_title", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)

    member ReleaseDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "release_date")
    JsonRuntime.GetNonOptionalValue("release_date", JsonRuntime.ConvertDateTime("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)

    member VoteAverage: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_average")
    JsonRuntime.GetNonOptionalValue("vote_average", JsonRuntime.ConvertDecimal("", value), value)

    member VoteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "vote_count")
    JsonRuntime.GetNonOptionalValue("vote_count", JsonRuntime.ConvertInteger("", value), value)


class ApiaryProvider+DomainTypes+Result2 : FDR.IJsonDocument
    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "author")
    JsonRuntime.GetNonOptionalValue("author", JsonRuntime.ConvertString("", value), value)

    member Content: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "content")
    JsonRuntime.GetNonOptionalValue("content", JsonRuntime.ConvertString("", value), value)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "url")
    JsonRuntime.GetNonOptionalValue("url", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Result3 : FDR.IJsonDocument
    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "description")
    JsonRuntime.GetNonOptionalValue("description", JsonRuntime.ConvertString("", value), value)

    member FavoriteCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "favorite_count")
    JsonRuntime.GetNonOptionalValue("favorite_count", JsonRuntime.ConvertInteger("", value), value)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member ItemCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "item_count")
    JsonRuntime.GetNonOptionalValue("item_count", JsonRuntime.ConvertInteger("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member PosterPath: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "poster_path")
    JsonRuntime.GetNonOptionalValue("poster_path", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Title : FDR.IJsonDocument
    member Iso31661: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_3166_1")
    JsonRuntime.GetNonOptionalValue("iso_3166_1", JsonRuntime.ConvertString("", value), value)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "title")
    JsonRuntime.GetNonOptionalValue("title", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Translation : FDR.IJsonDocument
    member EnglishName: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "english_name")
    JsonRuntime.GetNonOptionalValue("english_name", JsonRuntime.ConvertString("", value), value)

    member Iso6391: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1")
    JsonRuntime.GetNonOptionalValue("iso_639_1", JsonRuntime.ConvertString("", value), value)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+Youtube : FDR.IJsonDocument
    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "name")
    JsonRuntime.GetNonOptionalValue("name", JsonRuntime.ConvertString("", value), value)

    member Size: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "size")
    JsonRuntime.GetNonOptionalValue("size", JsonRuntime.ConvertString("", value), value)

    member Source: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "source")
    JsonRuntime.GetNonOptionalValue("source", JsonRuntime.ConvertString("", value), value)


class ApiaryProvider+DomainTypes+CertificationChoice : FDR.IJsonDocument
    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "Number", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                      let value = Some t.JsonValue
                                                                      JsonRuntime.GetNonOptionalValue("certificationChoice1of2", JsonRuntime.ConvertInteger("", value), value)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "String", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                      let value = Some t.JsonValue
                                                                      JsonRuntime.GetNonOptionalValue("certificationChoice2of2", JsonRuntime.ConvertString("", value), value)))


class ApiaryProvider+DomainTypes+Item : FDR.IJsonDocument
    member Action: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "action")
    JsonRuntime.GetNonOptionalValue("action", JsonRuntime.ConvertString("", value), value)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Iso6391: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "iso_639_1"))

    member OriginalValue: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "original_value"))

    member Time: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "time")
    JsonRuntime.GetNonOptionalValue("time", JsonRuntime.ConvertString("", value), value)

    member Value: ApiaryProvider+DomainTypes+ValueChoice option with get
    JsonRuntime.ConvertOptionalProperty(this, "value", new Func<_,_>(id)))


class ApiaryProvider+DomainTypes+Item2 : FDR.IJsonDocument
    member Action: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "action")
    JsonRuntime.GetNonOptionalValue("action", JsonRuntime.ConvertString("", value), value)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Time: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "time")
    JsonRuntime.GetNonOptionalValue("time", JsonRuntime.ConvertString("", value), value)

    member Value: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "value"))


class ApiaryProvider+DomainTypes+OriginalTitleChoice : FDR.IJsonDocument
    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "Number", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                      let value = Some t.JsonValue
                                                                      JsonRuntime.GetNonOptionalValue("original_titleChoice1of2", JsonRuntime.ConvertInteger("", value), value)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "String", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                      let value = Some t.JsonValue
                                                                      JsonRuntime.GetNonOptionalValue("original_titleChoice2of2", JsonRuntime.ConvertString("", value), value)))


class ApiaryProvider+DomainTypes+ReleaseDateChoice : FDR.IJsonDocument
    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                        let value = Some t.JsonValue
                                                                        JsonRuntime.GetNonOptionalValue("release_dateChoice1of1", JsonRuntime.ConvertDateTime("", value), value)))


class ApiaryProvider+DomainTypes+ReleaseDateChoice2 : FDR.IJsonDocument
    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                        let value = Some t.JsonValue
                                                                        JsonRuntime.GetNonOptionalValue("release_dateChoice1of1", JsonRuntime.ConvertDateTime("", value), value)))


class ApiaryProvider+DomainTypes+ReleaseDateChoice3 : FDR.IJsonDocument
    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                        let value = Some t.JsonValue
                                                                        JsonRuntime.GetNonOptionalValue("release_dateChoice1of1", JsonRuntime.ConvertDateTime("", value), value)))


class ApiaryProvider+DomainTypes+TitleChoice : FDR.IJsonDocument
    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "Number", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                      let value = Some t.JsonValue
                                                                      JsonRuntime.GetNonOptionalValue("titleChoice1of2", JsonRuntime.ConvertInteger("", value), value)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "String", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                      let value = Some t.JsonValue
                                                                      JsonRuntime.GetNonOptionalValue("titleChoice2of2", JsonRuntime.ConvertString("", value), value)))


class ApiaryProvider+DomainTypes+ValueChoice : FDR.IJsonDocument
    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                       let value = Some t.JsonValue
                                                                       JsonRuntime.GetNonOptionalValue("valueChoice2of4", JsonRuntime.ConvertBoolean("", value), value)))

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "Number", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                      let value = Some t.JsonValue
                                                                      JsonRuntime.GetNonOptionalValue("valueChoice1of4", JsonRuntime.ConvertInteger("", value), value)))

    member Record: ApiaryProvider+DomainTypes+ValueChoice4of4 option with get
    JsonRuntime.TryGetValueByTypeTag(this, "Record", new Func<_,_>(id)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "String", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                      let value = Some t.JsonValue
                                                                      JsonRuntime.GetNonOptionalValue("valueChoice3of4", JsonRuntime.ConvertString("", value), value)))


class ApiaryProvider+DomainTypes+ValueChoice4of4 : FDR.IJsonDocument
    member Certification: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "certification"))

    member Character: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "character"))

    member Department: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "department"))

    member Id: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "id"))

    member Iso31661: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "iso_3166_1"))

    member Job: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "job"))

    member Name: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "name"))

    member Order: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "order"))

    member PersonId: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "person_id"))

    member Primary: bool option with get
    JsonRuntime.ConvertBoolean("", JsonRuntime.TryGetPropertyUnpacked(this, "primary"))

    member ReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "release_date"))


