class CsvProvider : FDR.CsvFile<CsvProvider+Row>
    static member AsyncGetSample: () -> CsvProvider async
    CsvFile<_>.AsyncCreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                          Operations.GetNonOptionalValue("Distance", Operations.ConvertInteger("", Operations.AsOption(row.[0])), Operations.AsOption(row.[0])),
                                                          Operations.GetNonOptionalValue("Time", Operations.ConvertDecimal("", Operations.AsOption(row.[1])), Operations.AsOption(row.[1]))), new Func<_,_>(fun (row:_ * _) -> 
                                                                                                                                                                                                               [| Operations.ConvertIntegerBack("", Operations.GetOptionalValue((let t1,_ = row in t1)))
                                                                                                                                                                                                                  Operations.ConvertDecimalBack("", Operations.GetOptionalValue((let _,t2 = row in t2))) |]), (ProviderFileSystem.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "file with spaces.csv"), ",", '"', true, false, false)

    static member AsyncLoad: uri:string -> CsvProvider async
    CsvFile<_>.AsyncCreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                          Operations.GetNonOptionalValue("Distance", Operations.ConvertInteger("", Operations.AsOption(row.[0])), Operations.AsOption(row.[0])),
                                                          Operations.GetNonOptionalValue("Time", Operations.ConvertDecimal("", Operations.AsOption(row.[1])), Operations.AsOption(row.[1]))), new Func<_,_>(fun (row:_ * _) -> 
                                                                                                                                                                                                               [| Operations.ConvertIntegerBack("", Operations.GetOptionalValue((let t1,_ = row in t1)))
                                                                                                                                                                                                                  Operations.ConvertDecimalBack("", Operations.GetOptionalValue((let _,t2 = row in t2))) |]), (ProviderFileSystem.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), ",", '"', true, false, false)

    static member GetSample: () -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     Operations.GetNonOptionalValue("Distance", Operations.ConvertInteger("", Operations.AsOption(row.[0])), Operations.AsOption(row.[0])),
                                                     Operations.GetNonOptionalValue("Time", Operations.ConvertDecimal("", Operations.AsOption(row.[1])), Operations.AsOption(row.[1]))), new Func<_,_>(fun (row:_ * _) -> 
                                                                                                                                                                                                          [| Operations.ConvertIntegerBack("", Operations.GetOptionalValue((let t1,_ = row in t1)))
                                                                                                                                                                                                             Operations.ConvertDecimalBack("", Operations.GetOptionalValue((let _,t2 = row in t2))) |]), (ProviderFileSystem.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "file with spaces.csv") |> FSharpAsync.RunSynchronously, ",", '"', true, false, false)

    static member Load: stream:System.IO.Stream -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     Operations.GetNonOptionalValue("Distance", Operations.ConvertInteger("", Operations.AsOption(row.[0])), Operations.AsOption(row.[0])),
                                                     Operations.GetNonOptionalValue("Time", Operations.ConvertDecimal("", Operations.AsOption(row.[1])), Operations.AsOption(row.[1]))), new Func<_,_>(fun (row:_ * _) -> 
                                                                                                                                                                                                          [| Operations.ConvertIntegerBack("", Operations.GetOptionalValue((let t1,_ = row in t1)))
                                                                                                                                                                                                             Operations.ConvertDecimalBack("", Operations.GetOptionalValue((let _,t2 = row in t2))) |]), ((new StreamReader(stream)) :> TextReader), ",", '"', true, false, false)

    static member Load: reader:System.IO.TextReader -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     Operations.GetNonOptionalValue("Distance", Operations.ConvertInteger("", Operations.AsOption(row.[0])), Operations.AsOption(row.[0])),
                                                     Operations.GetNonOptionalValue("Time", Operations.ConvertDecimal("", Operations.AsOption(row.[1])), Operations.AsOption(row.[1]))), new Func<_,_>(fun (row:_ * _) -> 
                                                                                                                                                                                                          [| Operations.ConvertIntegerBack("", Operations.GetOptionalValue((let t1,_ = row in t1)))
                                                                                                                                                                                                             Operations.ConvertDecimalBack("", Operations.GetOptionalValue((let _,t2 = row in t2))) |]), reader, ",", '"', true, false, false)

    static member Load: uri:string -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     Operations.GetNonOptionalValue("Distance", Operations.ConvertInteger("", Operations.AsOption(row.[0])), Operations.AsOption(row.[0])),
                                                     Operations.GetNonOptionalValue("Time", Operations.ConvertDecimal("", Operations.AsOption(row.[1])), Operations.AsOption(row.[1]))), new Func<_,_>(fun (row:_ * _) -> 
                                                                                                                                                                                                          [| Operations.ConvertIntegerBack("", Operations.GetOptionalValue((let t1,_ = row in t1)))
                                                                                                                                                                                                             Operations.ConvertDecimalBack("", Operations.GetOptionalValue((let _,t2 = row in t2))) |]), (ProviderFileSystem.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri) |> FSharpAsync.RunSynchronously, ",", '"', true, false, false)

    static member Parse: text:string -> CsvProvider
    CsvFile<_>.CreateNonReentrant(new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                     Operations.GetNonOptionalValue("Distance", Operations.ConvertInteger("", Operations.AsOption(row.[0])), Operations.AsOption(row.[0])),
                                                     Operations.GetNonOptionalValue("Time", Operations.ConvertDecimal("", Operations.AsOption(row.[1])), Operations.AsOption(row.[1]))), new Func<_,_>(fun (row:_ * _) -> 
                                                                                                                                                                                                          [| Operations.ConvertIntegerBack("", Operations.GetOptionalValue((let t1,_ = row in t1)))
                                                                                                                                                                                                             Operations.ConvertDecimalBack("", Operations.GetOptionalValue((let _,t2 = row in t2))) |]), ((new StringReader(text)) :> TextReader), ",", '"', true, false, false)


class CsvProvider+Row : int * decimal
    member Distance: int<metre> with get
    (let t1,_ = this in t1)

    member Time: decimal<second> with get
    (let _,t2 = this in t2)


