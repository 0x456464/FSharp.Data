class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+DomainTypes+Entity async
    JsonDocument.AsyncCreate((ProviderFileSystem.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "SimpleArray.json"), "")

    static member AsyncLoad: uri:string -> JsonProvider+DomainTypes+Entity async
    JsonDocument.AsyncCreate((ProviderFileSystem.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), "")

    static member GetSample: () -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create((ProviderFileSystem.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "SimpleArray.json") |> FSharpAsync.RunSynchronously, "")

    static member Load: stream:System.IO.Stream -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create((ProviderFileSystem.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri) |> FSharpAsync.RunSynchronously, "")

    static member Parse: text:string -> JsonProvider+DomainTypes+Entity
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+DomainTypes

class JsonProvider+DomainTypes+Entity : FDR.JsonDocument
    member Items: JsonProvider+DomainTypes+Item[] with get
    JsonOperations.ConvertArray(JsonDocument.Create(JsonOperations.GetProperty(this.JsonValue, "items")), new Func<_,_>(fun (t:JsonDocument) -> t.JsonValue), new Func<_,_>(fun (t:JsonValue) -> JsonDocument.Create(t)), new Func<_,_>(id)))


class JsonProvider+DomainTypes+Item : FDR.JsonDocument
    member Id: string with get
    JsonOperations.GetString(JsonDocument.Create(JsonOperations.GetProperty(this.JsonValue, "id")).JsonValue)


