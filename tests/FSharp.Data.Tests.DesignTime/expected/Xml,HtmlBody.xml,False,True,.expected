class XmlProvider
    static member AsyncGetSample: () -> XmlProvider+DomainTypes+Div async
    XmlElement.AsyncCreate((ProviderFileSystem.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "HtmlBody.xml"))

    static member AsyncLoad: uri:string -> XmlProvider+DomainTypes+Div async
    XmlElement.AsyncCreate((ProviderFileSystem.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri))

    static member GetSample: () -> XmlProvider+DomainTypes+Div
    XmlElement.Create((ProviderFileSystem.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "HtmlBody.xml") |> FSharpAsync.RunSynchronously)

    static member Load: stream:System.IO.Stream -> XmlProvider+DomainTypes+Div
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+DomainTypes+Div
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+DomainTypes+Div
    XmlElement.Create((ProviderFileSystem.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri) |> FSharpAsync.RunSynchronously)

    static member Parse: text:string -> XmlProvider+DomainTypes+Div
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+DomainTypes+Div : FDR.XmlElement
    member GetDivs: () -> XmlProvider+DomainTypes+Div[]
    XmlOperations.ConvertArray(this, "div", new Func<_,_>(id)))

    member GetSpans: () -> string[]
    XmlOperations.ConvertArray(this, "span", new Func<_,_>(fun (t:XmlElement) -> Operations.GetNonOptionalValue("Value", Operations.ConvertString(XmlOperations.TryGetValue(t)), XmlOperations.TryGetValue(t))))

    member Id: string option with get
    Operations.ConvertString(XmlOperations.TryGetAttribute(this, "id"))

    member Value: string option with get
    Operations.ConvertString(XmlOperations.TryGetValue(this))


class XmlProvider+DomainTypes

