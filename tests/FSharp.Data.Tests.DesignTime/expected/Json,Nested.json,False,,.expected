class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+Entity async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Nested.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Entity async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSample: () -> JsonProvider+Entity
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Nested.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Entity
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Entity
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Entity
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Entity
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Entity : FDR.IJsonDocument
    member Main: JsonProvider+Main with get
    JsonRuntime.GetPropertyPacked(this, "main")


class JsonProvider+Main : FDR.IJsonDocument
    member Age: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "age")
    JsonRuntime.GetNonOptionalValue("age", JsonRuntime.ConvertInteger("", value), value)

    member FirstName: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "firstName")
    JsonRuntime.GetNonOptionalValue("firstName", JsonRuntime.ConvertString("", value), value)

    member IsCool: bool with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "isCool")
    JsonRuntime.GetNonOptionalValue("isCool", JsonRuntime.ConvertBoolean("", value), value)

    member LastName: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "lastName")
    JsonRuntime.GetNonOptionalValue("lastName", JsonRuntime.ConvertString("", value), value)


