class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+WorldBankChoice async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "WorldBank.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+WorldBankChoice async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSample: () -> JsonProvider+WorldBankChoice
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "WorldBank.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+WorldBankChoice
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+WorldBankChoice
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+WorldBankChoice
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)), "")

    static member Parse: text:string -> JsonProvider+WorldBankChoice
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+WorldBankChoice : FDR.IJsonDocument
    member Array: JsonProvider+WorldBankChoice1of2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetArrayChildByTypeTag(this, "", "Array"), new Func<_,_>(id)))

    member Record: JsonProvider+WorldBankChoice2of2 with get
    JsonRuntime.GetArrayChildByTypeTag(this, "", "Record")


class JsonProvider+WorldBankChoice1of2 : FDR.IJsonDocument
    member Country: JsonProvider+Country with get
    JsonRuntime.GetPropertyPacked(this, "country")

    member Date: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "date")
    JsonRuntime.GetNonOptionalValue("date", JsonRuntime.ConvertInteger("", value), value)

    member Decimal: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "decimal")
    JsonRuntime.GetNonOptionalValue("decimal", JsonRuntime.ConvertInteger("", value), value)

    member Indicator: JsonProvider+Indicator with get
    JsonRuntime.GetPropertyPacked(this, "indicator")

    member Value: JsonProvider+ValueChoice with get
    JsonRuntime.GetPropertyPacked(this, "value")


class JsonProvider+WorldBankChoice2of2 : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "page")
    JsonRuntime.GetNonOptionalValue("page", JsonRuntime.ConvertInteger("", value), value)

    member Pages: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "pages")
    JsonRuntime.GetNonOptionalValue("pages", JsonRuntime.ConvertInteger("", value), value)

    member PerPage: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "per_page")
    JsonRuntime.GetNonOptionalValue("per_page", JsonRuntime.ConvertInteger("", value), value)

    member Total: int with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "total")
    JsonRuntime.GetNonOptionalValue("total", JsonRuntime.ConvertInteger("", value), value)


class JsonProvider+Country : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Value: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "value")
    JsonRuntime.GetNonOptionalValue("value", JsonRuntime.ConvertString("", value), value)


class JsonProvider+Indicator : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "id")
    JsonRuntime.GetNonOptionalValue("id", JsonRuntime.ConvertString("", value), value)

    member Value: string with get
    let value = JsonRuntime.TryGetPropertyUnpacked(this, "value")
    JsonRuntime.GetNonOptionalValue("value", JsonRuntime.ConvertString("", value), value)


class JsonProvider+ValueChoice : FDR.IJsonDocument
    member Number: decimal option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> 
                                                                          let value = Some t.JsonValue
                                                                          JsonRuntime.GetNonOptionalValue("value", JsonRuntime.ConvertDecimal("", value), value)))


