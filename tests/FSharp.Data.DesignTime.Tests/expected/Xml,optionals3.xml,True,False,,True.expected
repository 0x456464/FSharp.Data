class XmlProvider : obj
    static member AsyncGetSamples: () -> XmlProvider+Rss[] async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.CreateList(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "optionals3.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Rss async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri), f)

    static member GetSamples: () -> XmlProvider+Rss[]
    XmlElement.CreateList(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "optionals3.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Rss
    let stream = stream
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Rss
    let reader = reader
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Rss
    let uri = uri
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri)))

    static member Parse: text:string -> XmlProvider+Rss
    let text = text
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Rss : FDR.BaseTypes.XmlElement
    new : version:decimal -> channel:XmlProvider+Channel -> XmlProvider+Rss
    let this = version
    let version = channel
    XmlRuntime.CreateRecord("rss", 
                            [| ("version",
                                (this :> obj)) |], 
                            [| ("channel",
                                (version :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Rss
    let this = xElement
    XmlElement.Create(this)

    member Channel: XmlProvider+Channel with get
    let this = this
    XmlRuntime.GetChild(this, "channel")

    member Version: decimal with get
    let this = this
    let value = XmlRuntime.TryGetAttribute(this, "version")
    TextRuntime.GetNonOptionalValue("Attribute version", TextRuntime.ConvertDecimal("", value), value)


class XmlProvider+Channel : FDR.BaseTypes.XmlElement
    new : items:XmlProvider+Item[] -> XmlProvider+Channel
    let this = items
    XmlRuntime.CreateRecord("channel", 
                            [| |], 
                            [| ("item",
                                (this :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Channel
    let this = xElement
    XmlElement.Create(this)

    member Items: XmlProvider+Item[] with get
    let this = this
    XmlRuntime.ConvertArray(this, "item", new Func<_,_>(id)))


class XmlProvider+Item : FDR.BaseTypes.XmlElement
    new : title:string option -> description:XmlProvider+Description option -> temp:XmlProvider+Temp option -> XmlProvider+Item
    let this = title
    let title = description
    let description = temp
    XmlRuntime.CreateRecord("item", 
                            [| |], 
                            [| ("title",
                                (this :> obj))
                               ("description",
                                (title :> obj))
                               ("temp",
                                (description :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Item
    let this = xElement
    XmlElement.Create(this)

    member Description: XmlProvider+Description option with get
    let this = this
    XmlRuntime.ConvertOptional(this, "description", new Func<_,_>(id)))

    member Temp: XmlProvider+Temp option with get
    let this = this
    XmlRuntime.ConvertOptional(this, "temp", new Func<_,_>(id)))

    member Title: string option with get
    let this = this
    XmlRuntime.ConvertOptional(this, "title", new Func<_,_>(fun (t:XmlElement) -> 
                                                               let value = XmlRuntime.TryGetValue(t)
                                                               TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))


class XmlProvider+Description : FDR.BaseTypes.XmlElement
    new : () -> XmlProvider+Description
    XmlRuntime.CreateRecord("description", 
                            [| |], 
                            [| |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Description
    let this = xElement
    XmlElement.Create(this)


class XmlProvider+Temp : FDR.BaseTypes.XmlElement
    new : () -> XmlProvider+Temp
    XmlRuntime.CreateRecord("temp", 
                            [| |], 
                            [| |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Temp
    let this = xElement
    XmlElement.Create(this)


