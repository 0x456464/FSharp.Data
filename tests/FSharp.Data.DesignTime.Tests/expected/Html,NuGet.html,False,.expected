class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "NuGet.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "NuGet.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "NuGet.html")))

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TableContainer with get
    this


class HtmlProvider+TableContainer : FDR.TypedHtmlDocument
    member Table0: HtmlProvider+Table0 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Version", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Downloads", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Last updated", TextRuntime.ConvertDateTime("", value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table_0")


class HtmlProvider+Table0 : FDR.HtmlTable<HtmlProvider+Table0+Row>

class HtmlProvider+Table0+Row : string * int * System.DateTime
    member Downloads: int with get
    (let _,t2,_ = this in t2)

    member Last updated: System.DateTime with get
    (let _,_,t3 = this in t3)

    member Version: string with get
    (let t1,_,_ = this in t1)


