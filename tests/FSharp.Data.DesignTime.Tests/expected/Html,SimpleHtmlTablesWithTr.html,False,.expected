[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "SimpleHtmlTablesWithTr.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "SimpleHtmlTablesWithTr.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "SimpleHtmlTablesWithTr.html")))

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TableContainer with get
    this


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TableContainer : FDR.TypedHtmlDocument
    member MyTable: HtmlProvider+MyTable with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertBoolean("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Column3", TextRuntime.ConvertDecimal("", value), value))
    HtmlTable<_>.Create(rowConverter, this, "myTable", true)

    member Table2: HtmlProvider+Table2 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("CptyId", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertDecimal("", value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table2", true)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+MyTable : FDR.HtmlTable<HtmlProvider+MyTable+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table2 : FDR.HtmlTable<HtmlProvider+Table2+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+MyTable+Row : bool * int * decimal
    member Column1: bool with get
    (let t1,_,_ = this in t1)

    member Column3: decimal with get
    (let _,_,t3 = this in t3)

    member Column6: int with get
    (let _,t2,_ = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table2+Row : System.DateTime * int * decimal
    member CptyId: int with get
    (let _,t2,_ = this in t2)

    member Date: System.DateTime with get
    (let t1,_,_ = this in t1)

    member Value: decimal with get
    (let _,_,t3 = this in t3)


