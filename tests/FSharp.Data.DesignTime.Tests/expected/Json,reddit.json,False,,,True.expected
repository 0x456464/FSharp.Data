class JsonProvider : obj
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "reddit.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "reddit.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    let stream = stream
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    let reader = reader
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    let uri = uri
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    let text = text
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : kind:string -> data:JsonProvider+Data -> JsonProvider+Root
    let this = kind
    let kind = data
    JsonRuntime.CreateRecord([| ("kind",
                                 (this :> obj))
                                ("data",
                                 (kind :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Data: JsonProvider+Data with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "data")

    member Kind: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "kind")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Data : FDR.BaseTypes.IJsonDocument
    new : modhash:JsonValue -> children:JsonProvider+Child[] -> after:string -> before:JsonValue -> JsonProvider+Data
    let this = modhash
    let modhash = children
    let children = after
    let after = before
    JsonRuntime.CreateRecord([| ("modhash",
                                 (this :> obj))
                                ("children",
                                 (modhash :> obj))
                                ("after",
                                 (children :> obj))
                                ("before",
                                 (after :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Data
    let this = jsonValue
    JsonDocument.Create(this, "")

    member After: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "after")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Before: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "before")

    member Children: JsonProvider+Child[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "children"), new Func<_,_>(id)))

    member Modhash: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "modhash")


class JsonProvider+Child : FDR.BaseTypes.IJsonDocument
    new : kind:string -> data:JsonProvider+Data2 -> JsonProvider+Child
    let this = kind
    let kind = data
    JsonRuntime.CreateRecord([| ("kind",
                                 (this :> obj))
                                ("data",
                                 (kind :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Child
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Data: JsonProvider+Data2 with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "data")

    member Kind: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "kind")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Data2 : FDR.BaseTypes.IJsonDocument
    new : subredditId:string -> linkTitle:string -> bannedBy:JsonValue -> subreddit:string -> linkAuthor:string -> likes:JsonValue -> replies:JsonValue -> saved:bool -> id:string -> gilded:int -> author:string -> parentId:string -> approvedBy:JsonValue -> body:string -> edited:bool -> authorFlairCssClass:JsonValue -> downs:int -> bodyHtml:string -> linkId:string -> scoreHidden:bool -> name:string -> created:int -> authorFlairText:JsonValue -> linkUrl:string -> createdUtc:int -> ups:int -> numReports:JsonValue -> distinguished:JsonValue -> JsonProvider+Data2
    let this = subredditId
    let subredditId = linkTitle
    let linkTitle = bannedBy
    let bannedBy = subreddit
    let subreddit = linkAuthor
    let linkAuthor = likes
    let likes = replies
    let replies = saved
    let saved = id
    let id = gilded
    let gilded = author
    let author = parentId
    let parentId = approvedBy
    let approvedBy = body
    let body = edited
    let edited = authorFlairCssClass
    let authorFlairCssClass = downs
    let downs = bodyHtml
    let bodyHtml = linkId
    let linkId = scoreHidden
    let scoreHidden = name
    let name = created
    let created = authorFlairText
    let authorFlairText = linkUrl
    let linkUrl = createdUtc
    let createdUtc = ups
    let ups = numReports
    let numReports = distinguished
    JsonRuntime.CreateRecord([| ("subreddit_id",
                                 (this :> obj))
                                ("link_title",
                                 (subredditId :> obj))
                                ("banned_by",
                                 (linkTitle :> obj))
                                ("subreddit",
                                 (bannedBy :> obj))
                                ("link_author",
                                 (subreddit :> obj))
                                ("likes",
                                 (linkAuthor :> obj))
                                ("replies",
                                 (likes :> obj))
                                ("saved",
                                 (replies :> obj))
                                ("id",
                                 (saved :> obj))
                                ("gilded",
                                 (id :> obj))
                                ("author",
                                 (gilded :> obj))
                                ("parent_id",
                                 (author :> obj))
                                ("approved_by",
                                 (parentId :> obj))
                                ("body",
                                 (approvedBy :> obj))
                                ("edited",
                                 (body :> obj))
                                ("author_flair_css_class",
                                 (edited :> obj))
                                ("downs",
                                 (authorFlairCssClass :> obj))
                                ("body_html",
                                 (downs :> obj))
                                ("link_id",
                                 (bodyHtml :> obj))
                                ("score_hidden",
                                 (linkId :> obj))
                                ("name",
                                 (scoreHidden :> obj))
                                ("created",
                                 (name :> obj))
                                ("author_flair_text",
                                 (created :> obj))
                                ("link_url",
                                 (authorFlairText :> obj))
                                ("created_utc",
                                 (linkUrl :> obj))
                                ("ups",
                                 (createdUtc :> obj))
                                ("num_reports",
                                 (ups :> obj))
                                ("distinguished",
                                 (numReports :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Data2
    let this = jsonValue
    JsonDocument.Create(this, "")

    member ApprovedBy: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "approved_by")

    member Author: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member AuthorFlairCssClass: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "author_flair_css_class")

    member AuthorFlairText: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "author_flair_text")

    member BannedBy: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "banned_by")

    member Body: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "body")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member BodyHtml: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "body_html")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Created: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CreatedUtc: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_utc")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Distinguished: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "distinguished")

    member Downs: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "downs")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Edited: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "edited")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Gilded: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "gilded")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Likes: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "likes")

    member LinkAuthor: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "link_author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LinkId: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "link_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LinkTitle: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "link_title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LinkUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "link_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member NumReports: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "num_reports")

    member ParentId: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "parent_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Replies: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "replies")

    member Saved: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "saved")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member ScoreHidden: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "score_hidden")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Subreddit: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "subreddit")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SubredditId: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "subreddit_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Ups: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "ups")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


