[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "us_presidents_wikipedia.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "us_presidents_wikipedia.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "us_presidents_wikipedia.html")))

    member Lists: HtmlProvider+ListsContainer with get
    this

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TablesContainer with get
    this


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListsContainer : FDR.TypedHtmlDocument
    member Contents: HtmlProvider+Contents with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Contents")

    member ``External links``: HtmlProvider+ExternalLinks with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "External links")

    member Interaction: HtmlProvider+Interaction with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Interaction")

    member Languages: HtmlProvider+Languages with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages")

    member Languages2: HtmlProvider+Languages2 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages2")

    member Languages3: HtmlProvider+Languages3 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages3")

    member Languages4: HtmlProvider+Languages4 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages4")

    member List10: HtmlProvider+List10 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List10")

    member List11: HtmlProvider+List11 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List11")

    member List12: HtmlProvider+List12 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List12")

    member List13: HtmlProvider+List13 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List13")

    member List14: HtmlProvider+List14 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List14")

    member List15: HtmlProvider+List15 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List15")

    member List16: HtmlProvider+List16 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List16")

    member List17: HtmlProvider+List17 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List17")

    member List18: HtmlProvider+List18 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List18")

    member List19: HtmlProvider+List19 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List19")

    member List20: HtmlProvider+List20 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List20")

    member List21: HtmlProvider+List21 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List21")

    member List22: HtmlProvider+List22 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List22")

    member List23: HtmlProvider+List23 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List23")

    member List24: HtmlProvider+List24 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List24")

    member List25: HtmlProvider+List25 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List25")

    member List6: HtmlProvider+List6 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List6")

    member List7: HtmlProvider+List7 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List7")

    member List8: HtmlProvider+List8 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List8")

    member List9: HtmlProvider+List9 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List9")

    member Namespaces: HtmlProvider+Namespaces with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Namespaces")

    member Navigation: HtmlProvider+Navigation with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Navigation")

    member Notes: HtmlProvider+Notes with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Notes")

    member ``Personal tools``: HtmlProvider+PersonalTools with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Personal tools")

    member Print/export: HtmlProvider+PrintExport with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Print/export")

    member References: HtmlProvider+References with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "References")

    member ``See also``: HtmlProvider+SeeAlso with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "See also")

    member Tools: HtmlProvider+Tools with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Tools")

    member Views: HtmlProvider+Views with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Views")


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TablesContainer : FDR.TypedHtmlDocument
    member ``List of presidents``: HtmlProvider+ListOfPresidents with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("№", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("President", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("President2", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Took office", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Left office", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[5])
                                        TextRuntime.GetNonOptionalValue("Party", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[6])
                                        TextRuntime.GetNonOptionalValue("Term", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[7])
                                        TextRuntime.GetNonOptionalValue("Previous office", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[8])
                                        TextRuntime.GetNonOptionalValue("Vice President", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[9])
                                        TextRuntime.GetNonOptionalValue("Vice President 2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "List of presidents", true)

    member ``Living former presidents``: HtmlProvider+LivingFormerPresidents with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("President", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Term of office", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Date of birth", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Living former presidents", true)

    member Table12: HtmlProvider+Table12 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Lists related to the Presidents and Vice Presidents of the United States", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Lists related to the Presidents and Vice Presidents of the United States 2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table12", true)

    member Table8: HtmlProvider+Table8 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Chief executives of the United States", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Chief executives of the United States 2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table8", true)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Contents : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ExternalLinks : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Interaction : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Languages : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Languages2 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Languages3 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Languages4 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List10 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List11 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List12 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List13 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List14 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List15 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List16 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List17 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List18 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List19 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List20 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List21 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List22 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List23 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List24 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List25 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List6 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List7 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List8 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List9 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfPresidents : FDR.HtmlTable<HtmlProvider+ListOfPresidents+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+LivingFormerPresidents : FDR.HtmlTable<HtmlProvider+LivingFormerPresidents+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Namespaces : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Navigation : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Notes : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+PersonalTools : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+PrintExport : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+References : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+SeeAlso : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table12 : FDR.HtmlTable<HtmlProvider+Table12+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table8 : FDR.HtmlTable<HtmlProvider+Table8+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Tools : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Views : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfPresidents+Row : int * string * string * string * string * string * string * string * string * string
    member ``Left office``: string with get
    (let _,_,_,_,t5,_,_,_,_,_ = this in t5)

    member Party: string with get
    (let _,_,_,_,_,t6,_,_,_,_ = this in t6)

    member President: string with get
    (let _,t2,_,_,_,_,_,_,_,_ = this in t2)

    member President2: string with get
    (let _,_,t3,_,_,_,_,_,_,_ = this in t3)

    member ``Previous office``: string with get
    (let _,_,_,_,_,_,_,t8,_,_ = this in t8)

    member Term: string with get
    (let _,_,_,_,_,_,t7,_,_,_ = this in t7)

    member ``Took office``: string with get
    (let _,_,_,t4,_,_,_,_,_,_ = this in t4)

    member ``Vice President``: string with get
    (let _,_,_,_,_,_,_,_,t9,_ = this in t9)

    member ``Vice President 2``: string with get
    (let _,_,_,_,_,_,_,_,_,t10 = this in t10)

    member №: int with get
    (let t1,_,_,_,_,_,_,_,_,_ = this in t1)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+LivingFormerPresidents+Row : string * string * string
    member ``Date of birth``: string with get
    (let _,_,t3 = this in t3)

    member President: string with get
    (let t1,_,_ = this in t1)

    member ``Term of office``: string with get
    (let _,t2,_ = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table12+Row : string * string
    member ``Lists related to the Presidents and Vice Presidents of the United States``: string with get
    (let t1,_ = this in t1)

    member ``Lists related to the Presidents and Vice Presidents of the United States 2``: string with get
    (let _,t2 = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table8+Row : string * string
    member ``Chief executives of the United States``: string with get
    (let t1,_ = this in t1)

    member ``Chief executives of the United States 2``: string with get
    (let _,t2 = this in t2)


