[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "us_presidents_wikipedia.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "us_presidents_wikipedia.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "us_presidents_wikipedia.html")))

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TableContainer with get
    this


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TableContainer : FDR.TypedHtmlDocument
    member ListOfPresidents: HtmlProvider+ListOfPresidents with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("№", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("President", TextRuntime.ConvertFloat("", "", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("President2", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Took office", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Left office", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[5])
                                        TextRuntime.GetNonOptionalValue("Party", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[6])
                                        TextRuntime.GetNonOptionalValue("Term[n 1]", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[7])
                                        TextRuntime.GetNonOptionalValue("Previous office", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[8])
                                        TextRuntime.GetNonOptionalValue("Vice President", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[9])
                                        TextRuntime.GetNonOptionalValue("Vice President2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "List of presidents")

    member LivingFormerPresidents: HtmlProvider+LivingFormerPresidents with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("President", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Term of office", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Date of birth", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Living former presidents")

    member Table10: HtmlProvider+Table10 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Chief executives of the United States", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Chief executives of the United States2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table10")

    member Table12: HtmlProvider+Table12 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Lists related to the Presidents and Vice Presidents of the United States", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Lists related to the Presidents and Vice Presidents of the United States2", TextRuntime.ConvertFloat("", "", value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table12")


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfPresidents : FDR.HtmlTable<HtmlProvider+ListOfPresidents+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+LivingFormerPresidents : FDR.HtmlTable<HtmlProvider+LivingFormerPresidents+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table10 : FDR.HtmlTable<HtmlProvider+Table10+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table12 : FDR.HtmlTable<HtmlProvider+Table12+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfPresidents+Row : int * float * string * string * string * string * string * string * string * string
    member ``Left office``: string with get
    (let _,_,_,_,t5,_,_,_,_,_ = this in t5)

    member Party: string with get
    (let _,_,_,_,_,t6,_,_,_,_ = this in t6)

    member President: float with get
    (let _,t2,_,_,_,_,_,_,_,_ = this in t2)

    member President2: string with get
    (let _,_,t3,_,_,_,_,_,_,_ = this in t3)

    member ``Previous office``: string with get
    (let _,_,_,_,_,_,_,t8,_,_ = this in t8)

    member ``Term[n 1]``: string with get
    (let _,_,_,_,_,_,t7,_,_,_ = this in t7)

    member ``Took office``: string with get
    (let _,_,_,t4,_,_,_,_,_,_ = this in t4)

    member ``Vice President``: string with get
    (let _,_,_,_,_,_,_,_,t9,_ = this in t9)

    member ``Vice President2``: string with get
    (let _,_,_,_,_,_,_,_,_,t10 = this in t10)

    member №: int with get
    (let t1,_,_,_,_,_,_,_,_,_ = this in t1)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+LivingFormerPresidents+Row : string * string * string
    member ``Date of birth``: string with get
    (let _,_,t3 = this in t3)

    member President: string with get
    (let t1,_,_ = this in t1)

    member ``Term of office``: string with get
    (let _,t2,_ = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table10+Row : string * string
    member ``Chief executives of the United States``: string with get
    (let t1,_ = this in t1)

    member ``Chief executives of the United States2``: string with get
    (let _,t2 = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table12+Row : string * float
    member ``Lists related to the Presidents and Vice Presidents of the United States``: string with get
    (let t1,_ = this in t1)

    member ``Lists related to the Presidents and Vice Presidents of the United States2``: float with get
    (let _,t2 = this in t2)


