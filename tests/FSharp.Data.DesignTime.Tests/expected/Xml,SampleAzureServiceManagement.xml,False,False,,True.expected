class XmlProvider : obj
    static member AsyncGetSample: () -> XmlProvider+Locations async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "SampleAzureServiceManagement.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Locations async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri), f)

    static member GetSample: () -> XmlProvider+Locations
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "SampleAzureServiceManagement.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Locations
    let stream = stream
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Locations
    let reader = reader
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Locations
    let uri = uri
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri)))

    static member Parse: text:string -> XmlProvider+Locations
    let text = text
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Locations : FDR.BaseTypes.XmlElement
    new : locations:XmlProvider+Location[] -> XmlProvider+Locations
    let this = locations
    XmlRuntime.CreateRecord("{http://schemas.microsoft.com/windowsazure}Locations", 
                            [| |], 
                            [| ("{http://schemas.microsoft.com/windowsazure}Location",
                                (this :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Locations
    let this = xElement
    XmlElement.Create(this)

    member Locations: XmlProvider+Location[] with get
    let this = this
    XmlRuntime.ConvertArray(this, "{http://schemas.microsoft.com/windowsazure}Location", new Func<_,_>(id)))


class XmlProvider+Location : FDR.BaseTypes.XmlElement
    new : name:string -> displayName:string -> availableServices:string[] -> computeCapabilities:XmlProvider+ComputeCapabilities -> XmlProvider+Location
    let this = name
    let name = displayName
    let displayName = availableServices
    let availableServices = computeCapabilities
    XmlRuntime.CreateRecord("{http://schemas.microsoft.com/windowsazure}Location", 
                            [| |], 
                            [| ("{http://schemas.microsoft.com/windowsazure}Name",
                                (this :> obj))
                               ("{http://schemas.microsoft.com/windowsazure}DisplayName",
                                (name :> obj))
                               ("{http://schemas.microsoft.com/windowsazure}AvailableServices|{http://schemas.microsoft.com/windowsazure}AvailableService",
                                (displayName :> obj))
                               ("{http://schemas.microsoft.com/windowsazure}ComputeCapabilities",
                                (availableServices :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Location
    let this = xElement
    XmlElement.Create(this)

    member AvailableServices: string[] with get
    let this = this
    XmlRuntime.ConvertArray(this, "{http://schemas.microsoft.com/windowsazure}AvailableServices|{http://schemas.microsoft.com/windowsazure}AvailableService", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                                                                                                               let value = XmlRuntime.TryGetValue(t)
                                                                                                                                                                               TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))

    member ComputeCapabilities: XmlProvider+ComputeCapabilities with get
    let this = this
    XmlRuntime.GetChild(this, "{http://schemas.microsoft.com/windowsazure}ComputeCapabilities")

    member DisplayName: string with get
    let this = this
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://schemas.microsoft.com/windowsazure}DisplayName"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Name: string with get
    let this = this
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://schemas.microsoft.com/windowsazure}Name"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


class XmlProvider+ComputeCapabilities : FDR.BaseTypes.XmlElement
    new : webWorkerRoleSizes:XmlProvider+WebWorkerRoleSizes -> virtualMachinesRoleSizes:XmlProvider+VirtualMachinesRoleSizes -> XmlProvider+ComputeCapabilities
    let this = webWorkerRoleSizes
    let webWorkerRoleSizes = virtualMachinesRoleSizes
    XmlRuntime.CreateRecord("{http://schemas.microsoft.com/windowsazure}ComputeCapabilities", 
                            [| |], 
                            [| ("{http://schemas.microsoft.com/windowsazure}WebWorkerRoleSizes",
                                (this :> obj))
                               ("{http://schemas.microsoft.com/windowsazure}VirtualMachinesRoleSizes",
                                (webWorkerRoleSizes :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+ComputeCapabilities
    let this = xElement
    XmlElement.Create(this)

    member VirtualMachinesRoleSizes: XmlProvider+VirtualMachinesRoleSizes with get
    let this = this
    XmlRuntime.GetChild(this, "{http://schemas.microsoft.com/windowsazure}VirtualMachinesRoleSizes")

    member WebWorkerRoleSizes: XmlProvider+WebWorkerRoleSizes with get
    let this = this
    XmlRuntime.GetChild(this, "{http://schemas.microsoft.com/windowsazure}WebWorkerRoleSizes")


class XmlProvider+VirtualMachinesRoleSizes : FDR.BaseTypes.XmlElement
    new : roleSizes:string[] -> XmlProvider+VirtualMachinesRoleSizes
    let this = roleSizes
    XmlRuntime.CreateRecord("{http://schemas.microsoft.com/windowsazure}VirtualMachinesRoleSizes", 
                            [| |], 
                            [| ("{http://schemas.microsoft.com/windowsazure}RoleSize",
                                (this :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+VirtualMachinesRoleSizes
    let this = xElement
    XmlElement.Create(this)

    member RoleSizes: string[] with get
    let this = this
    XmlRuntime.ConvertArray(this, "{http://schemas.microsoft.com/windowsazure}RoleSize", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                                          let value = XmlRuntime.TryGetValue(t)
                                                                                                          TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))


class XmlProvider+WebWorkerRoleSizes : FDR.BaseTypes.XmlElement
    new : roleSizes:string[] -> XmlProvider+WebWorkerRoleSizes
    let this = roleSizes
    XmlRuntime.CreateRecord("{http://schemas.microsoft.com/windowsazure}WebWorkerRoleSizes", 
                            [| |], 
                            [| ("{http://schemas.microsoft.com/windowsazure}RoleSize",
                                (this :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+WebWorkerRoleSizes
    let this = xElement
    XmlElement.Create(this)

    member RoleSizes: string[] with get
    let this = this
    XmlRuntime.ConvertArray(this, "{http://schemas.microsoft.com/windowsazure}RoleSize", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                                          let value = XmlRuntime.TryGetValue(t)
                                                                                                          TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))


