class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "list_of_counties_wikipedia.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "list_of_counties_wikipedia.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "list_of_counties_wikipedia.html")))

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TableContainer with get
    this


class HtmlProvider+TableContainer : FDR.TypedHtmlDocument
    member Table0: HtmlProvider+Table0 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Rank", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Built-up area [ 3 ]", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Population (2011 Census) [ 3 ]", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Area (km�) [ 3 ]", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Density (People/km�) [ 3 ]", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[5])
                                        TextRuntime.GetNonOptionalValue("Major subdivisions [ 3 ]", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[6])
                                        TextRuntime.GetNonOptionalValue("Metropolitan Area [ 4 ] [ 5 ]", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[7])
                                        TextRuntime.GetNonOptionalValue("Notable changes between 2001 and 2011 censuses [ 6 ]", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table_0")

    member Table1: HtmlProvider+Table1 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Rank", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Urban Area [ 8 ]", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Population (2001 Census)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Area (km�)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Density (People/km�)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[5])
                                        TextRuntime.GetNonOptionalValue("Major subdivisions", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[6])
                                        TextRuntime.GetNonOptionalValue("Metropolitan Area [ 4 ] [ 5 ]", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table_1")

    member Table2: HtmlProvider+Table2 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Rank", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Urban Area [ 9 ]", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Population (2001 Census)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Area (km�)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Density (People/km�)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[5])
                                        TextRuntime.GetNonOptionalValue("Major subdivisions", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[6])
                                        TextRuntime.GetNonOptionalValue("Metropolitan Area [ 4 ] [ 5 ]", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table_2")


class HtmlProvider+Table0 : FDR.HtmlTable<HtmlProvider+Table0+Row>

class HtmlProvider+Table1 : FDR.HtmlTable<HtmlProvider+Table1+Row>

class HtmlProvider+Table2 : FDR.HtmlTable<HtmlProvider+Table2+Row>

class HtmlProvider+Table0+Row : int * string * decimal * decimal * decimal * string * string * string
    member Area (km�) [ 3 ]: decimal with get
    (let _,_,_,t4,_,_,_,_ = this in t4)

    member Built-up area [ 3 ]: string with get
    (let _,t2,_,_,_,_,_,_ = this in t2)

    member Density (People/km�) [ 3 ]: decimal with get
    (let _,_,_,_,t5,_,_,_ = this in t5)

    member Major subdivisions [ 3 ]: string with get
    (let _,_,_,_,_,t6,_,_ = this in t6)

    member Metropolitan Area [ 4 ] [ 5 ]: string with get
    (let _,_,_,_,_,_,t7,_ = this in t7)

    member Notable changes between 2001 and 2011 censuses [ 6 ]: string with get
    (let _,_,_,_,_,_,_,t8 = this in t8)

    member Population (2011 Census) [ 3 ]: decimal with get
    (let _,_,t3,_,_,_,_,_ = this in t3)

    member Rank: int with get
    (let t1,_,_,_,_,_,_,_ = this in t1)


class HtmlProvider+Table1+Row : int * string * decimal * decimal * decimal * string * string
    member Area (km�): decimal with get
    (let _,_,_,t4,_,_,_ = this in t4)

    member Density (People/km�): decimal with get
    (let _,_,_,_,t5,_,_ = this in t5)

    member Major subdivisions: string with get
    (let _,_,_,_,_,t6,_ = this in t6)

    member Metropolitan Area [ 4 ] [ 5 ]: string with get
    (let _,_,_,_,_,_,t7 = this in t7)

    member Population (2001 Census): decimal with get
    (let _,_,t3,_,_,_,_ = this in t3)

    member Rank: int with get
    (let t1,_,_,_,_,_,_ = this in t1)

    member Urban Area [ 8 ]: string with get
    (let _,t2,_,_,_,_,_ = this in t2)


class HtmlProvider+Table2+Row : int * string * decimal * decimal * decimal * string * string
    member Area (km�): decimal with get
    (let _,_,_,t4,_,_,_ = this in t4)

    member Density (People/km�): decimal with get
    (let _,_,_,_,t5,_,_ = this in t5)

    member Major subdivisions: string with get
    (let _,_,_,_,_,t6,_ = this in t6)

    member Metropolitan Area [ 4 ] [ 5 ]: string with get
    (let _,_,_,_,_,_,t7 = this in t7)

    member Population (2001 Census): decimal with get
    (let _,_,t3,_,_,_,_ = this in t3)

    member Rank: int with get
    (let t1,_,_,_,_,_,_ = this in t1)

    member Urban Area [ 9 ]: string with get
    (let _,t2,_,_,_,_,_ = this in t2)


