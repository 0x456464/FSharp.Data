[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "list_of_counties_wikipedia.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "list_of_counties_wikipedia.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "list_of_counties_wikipedia.html")))

    member Lists: HtmlProvider+ListsContainer with get
    this

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TablesContainer with get
    this


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListsContainer : FDR.TypedHtmlDocument
    member Commentary: HtmlProvider+Commentary with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Commentary")

    member Contents: HtmlProvider+Contents with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Contents")

    member Interaction: HtmlProvider+Interaction with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Interaction")

    member Languages: HtmlProvider+Languages with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages")

    member Languages2: HtmlProvider+Languages2 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages2")

    member Languages3: HtmlProvider+Languages3 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages3")

    member Languages4: HtmlProvider+Languages4 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Languages4")

    member List10: HtmlProvider+List10 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List10")

    member List11: HtmlProvider+List11 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List11")

    member List12: HtmlProvider+List12 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List12")

    member List13: HtmlProvider+List13 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List13")

    member List14: HtmlProvider+List14 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List14")

    member List15: HtmlProvider+List15 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List15")

    member List8: HtmlProvider+List8 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List8")

    member List9: HtmlProvider+List9 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List9")

    member Namespaces: HtmlProvider+Namespaces with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Namespaces")

    member Navigation: HtmlProvider+Navigation with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Navigation")

    member ``Personal tools``: HtmlProvider+PersonalTools with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Personal tools")

    member Print/export: HtmlProvider+PrintExport with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Print/export")

    member ``References and Notes``: HtmlProvider+ReferencesAndNotes with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "References and Notes")

    member ``See also``: HtmlProvider+SeeAlso with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "See also")

    member Tools: HtmlProvider+Tools with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Tools")

    member Views: HtmlProvider+Views with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Views")


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TablesContainer : FDR.TypedHtmlDocument
    member ``List of most populous built-up areas in England and Wales``: HtmlProvider+ListOfMostPopulousBuiltUpAreasInEnglandAndWales with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Rank", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Built-up area", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Population (2011 Census)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Area", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Density (People/km²)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[5])
                                        TextRuntime.GetNonOptionalValue("Major subdivisions", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[6])
                                        TextRuntime.GetNonOptionalValue("Metropolitan Area", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[7])
                                        TextRuntime.GetNonOptionalValue("Notable changes between 2001 and 2011 censuses", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "List of most populous built-up areas in England and Wales", true)

    member ``List of most populous urban areas in Northern Ireland``: HtmlProvider+ListOfMostPopulousUrbanAreasInNorthernIreland with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Rank", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Urban Area", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Population (2001 Census)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Area (km²)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Density (People/km²)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[5])
                                        TextRuntime.GetNonOptionalValue("Major subdivisions", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[6])
                                        TextRuntime.GetNonOptionalValue("Metropolitan Area", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "List of most populous urban areas in Northern Ireland", true)

    member ``List of most populous urban areas in Scotland``: HtmlProvider+ListOfMostPopulousUrbanAreasInScotland with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Rank", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Urban Area", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Population (2001 Census)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Area (km²)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Density (People/km²)", TextRuntime.ConvertDecimal("", value), value),
                                        let value = TextConversions.AsString(row.[5])
                                        TextRuntime.GetNonOptionalValue("Major subdivisions", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[6])
                                        TextRuntime.GetNonOptionalValue("Metropolitan Area", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "List of most populous urban areas in Scotland", true)

    member Table5: HtmlProvider+Table5 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("List of settlements in the United Kingdom", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("List of settlements in the United Kingdom 2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table5", true)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Commentary : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Contents : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Interaction : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Languages : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Languages2 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Languages3 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Languages4 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List10 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List11 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List12 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List13 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List14 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List15 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List8 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List9 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfMostPopulousBuiltUpAreasInEnglandAndWales : FDR.HtmlTable<HtmlProvider+ListOfMostPopulousBuiltUpAreasInEnglandAndWales+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfMostPopulousUrbanAreasInNorthernIreland : FDR.HtmlTable<HtmlProvider+ListOfMostPopulousUrbanAreasInNorthernIreland+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfMostPopulousUrbanAreasInScotland : FDR.HtmlTable<HtmlProvider+ListOfMostPopulousUrbanAreasInScotland+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Namespaces : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Navigation : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+PersonalTools : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+PrintExport : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ReferencesAndNotes : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+SeeAlso : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table5 : FDR.HtmlTable<HtmlProvider+Table5+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Tools : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Views : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfMostPopulousBuiltUpAreasInEnglandAndWales+Row : int * string * decimal * decimal * decimal * string * string * string
    member Area: decimal<MeasureProduct`2> with get
    (let _,_,_,t4,_,_,_,_ = this in t4)

    member ``Built-up area``: string with get
    (let _,t2,_,_,_,_,_,_ = this in t2)

    member ``Density (People/km²)``: decimal with get
    (let _,_,_,_,t5,_,_,_ = this in t5)

    member ``Major subdivisions``: string with get
    (let _,_,_,_,_,t6,_,_ = this in t6)

    member ``Metropolitan Area``: string with get
    (let _,_,_,_,_,_,t7,_ = this in t7)

    member ``Notable changes between 2001 and 2011 censuses``: string with get
    (let _,_,_,_,_,_,_,t8 = this in t8)

    member ``Population (2011 Census)``: decimal with get
    (let _,_,t3,_,_,_,_,_ = this in t3)

    member Rank: int with get
    (let t1,_,_,_,_,_,_,_ = this in t1)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfMostPopulousUrbanAreasInNorthernIreland+Row : int * string * decimal * decimal * decimal * string * string
    member ``Area (km²)``: decimal with get
    (let _,_,_,t4,_,_,_ = this in t4)

    member ``Density (People/km²)``: decimal with get
    (let _,_,_,_,t5,_,_ = this in t5)

    member ``Major subdivisions``: string with get
    (let _,_,_,_,_,t6,_ = this in t6)

    member ``Metropolitan Area``: string with get
    (let _,_,_,_,_,_,t7 = this in t7)

    member ``Population (2001 Census)``: decimal with get
    (let _,_,t3,_,_,_,_ = this in t3)

    member Rank: int with get
    (let t1,_,_,_,_,_,_ = this in t1)

    member ``Urban Area``: string with get
    (let _,t2,_,_,_,_,_ = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListOfMostPopulousUrbanAreasInScotland+Row : int * string * decimal * decimal * decimal * string * string
    member ``Area (km²)``: decimal with get
    (let _,_,_,t4,_,_,_ = this in t4)

    member ``Density (People/km²)``: decimal with get
    (let _,_,_,_,t5,_,_ = this in t5)

    member ``Major subdivisions``: string with get
    (let _,_,_,_,_,t6,_ = this in t6)

    member ``Metropolitan Area``: string with get
    (let _,_,_,_,_,_,t7 = this in t7)

    member ``Population (2001 Census)``: decimal with get
    (let _,_,t3,_,_,_,_ = this in t3)

    member Rank: int with get
    (let t1,_,_,_,_,_,_ = this in t1)

    member ``Urban Area``: string with get
    (let _,t2,_,_,_,_,_ = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table5+Row : string * string
    member ``List of settlements in the United Kingdom``: string with get
    (let t1,_ = this in t1)

    member ``List of settlements in the United Kingdom 2``: string with get
    (let _,t2 = this in t2)


