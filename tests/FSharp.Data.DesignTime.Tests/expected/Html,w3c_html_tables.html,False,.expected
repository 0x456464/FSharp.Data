[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "w3c_html_tables.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "w3c_html_tables.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "w3c_html_tables.html")))

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TableContainer with get
    this


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TableContainer : FDR.TypedHtmlDocument
    member ``Adding some more features``: HtmlProvider+AddingSomeMoreFeatures with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Volcano Name", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Location", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Last Major Eruption", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Type of Eruption", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Adding some more features", true)

    member ``Structuring the table further``: HtmlProvider+StructuringTheTableFurther with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Volcano Name", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Location", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Last Major Eruption", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Type of Eruption", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Structuring the table further", true)

    member ``The most basic table``: HtmlProvider+TheMostBasicTable with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Column3", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "The most basic table", false)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+AddingSomeMoreFeatures : FDR.HtmlTable<HtmlProvider+AddingSomeMoreFeatures+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+StructuringTheTableFurther : FDR.HtmlTable<HtmlProvider+StructuringTheTableFurther+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TheMostBasicTable : FDR.HtmlTable<HtmlProvider+TheMostBasicTable+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+AddingSomeMoreFeatures+Row : string * string * string * string
    member ``Last Major Eruption``: string with get
    (let _,_,t3,_ = this in t3)

    member Location: string with get
    (let _,t2,_,_ = this in t2)

    member ``Type of Eruption``: string with get
    (let _,_,_,t4 = this in t4)

    member ``Volcano Name``: string with get
    (let t1,_,_,_ = this in t1)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+StructuringTheTableFurther+Row : string * string * string * string
    member ``Last Major Eruption``: string with get
    (let _,_,t3,_ = this in t3)

    member Location: string with get
    (let _,t2,_,_ = this in t2)

    member ``Type of Eruption``: string with get
    (let _,_,_,t4 = this in t4)

    member ``Volcano Name``: string with get
    (let t1,_,_,_ = this in t1)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TheMostBasicTable+Row : string * string * string * string
    member Column1: string with get
    (let t1,_,_,_ = this in t1)

    member Column2: string with get
    (let _,t2,_,_ = this in t2)

    member Column3: string with get
    (let _,_,t3,_ = this in t3)

    member Column4: string with get
    (let _,_,_,t4 = this in t4)


