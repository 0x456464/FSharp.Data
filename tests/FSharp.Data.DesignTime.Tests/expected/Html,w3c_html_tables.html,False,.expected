[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "w3c_html_tables.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "w3c_html_tables.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "w3c_html_tables.html")))

    member Lists: HtmlProvider+ListsContainer with get
    this

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TablesContainer with get
    this


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListsContainer : FDR.TypedHtmlDocument
    member ``Adding some more features``: HtmlProvider+AddingSomeMoreFeatures with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Adding some more features")

    member ``CSS to the rescue: a better looking table``: HtmlProvider+CssToTheRescueABetterLookingTable with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "CSS to the rescue: a better looking table")

    member Contents: HtmlProvider+Contents with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Contents")

    member ``Exercise questions``: HtmlProvider+ExerciseQuestions with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Exercise questions")

    member ``Further reading``: HtmlProvider+FurtherReading with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Further reading")

    member List12: HtmlProvider+List12 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "List12")

    member Namespaces: HtmlProvider+Namespaces with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Namespaces")

    member Navigation: HtmlProvider+Navigation with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Navigation")

    member ``Structuring the table further``: HtmlProvider+StructuringTheTableFurther with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Structuring the table further")

    member Summary: HtmlProvider+Summary with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Summary")

    member ``The most basic table``: HtmlProvider+TheMostBasicTable with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "The most basic table")

    member Tools: HtmlProvider+Tools with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Tools")

    member Tools2: HtmlProvider+Tools2 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Tools2")

    member Tools3: HtmlProvider+Tools3 with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Tools3")

    member Views: HtmlProvider+Views with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.Create(rowConverter, this, "Views")


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TablesContainer : FDR.TypedHtmlDocument
    member ``Adding some more features``: HtmlProvider+AddingSomeMoreFeatures with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Volcano Name", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Location", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Last Major Eruption", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Type of Eruption", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Adding some more features", true)

    member ``Structuring the table further``: HtmlProvider+StructuringTheTableFurther with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Volcano Name", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Location", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Last Major Eruption", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Type of Eruption", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Structuring the table further", true)

    member ``The most basic table``: HtmlProvider+TheMostBasicTable with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Column3", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "The most basic table", false)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+AddingSomeMoreFeatures : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+AddingSomeMoreFeatures : FDR.HtmlTable<HtmlProvider+AddingSomeMoreFeatures+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Contents : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+CssToTheRescueABetterLookingTable : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ExerciseQuestions : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+FurtherReading : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+List12 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Namespaces : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Navigation : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+StructuringTheTableFurther : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+StructuringTheTableFurther : FDR.HtmlTable<HtmlProvider+StructuringTheTableFurther+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Summary : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TheMostBasicTable : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TheMostBasicTable : FDR.HtmlTable<HtmlProvider+TheMostBasicTable+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Tools : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Tools2 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Tools3 : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Views : FDR.HtmlList<string>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+AddingSomeMoreFeatures+Row : string * string * string * string
    member ``Last Major Eruption``: string with get
    (let _,_,t3,_ = this in t3)

    member Location: string with get
    (let _,t2,_,_ = this in t2)

    member ``Type of Eruption``: string with get
    (let _,_,_,t4 = this in t4)

    member ``Volcano Name``: string with get
    (let t1,_,_,_ = this in t1)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+StructuringTheTableFurther+Row : string * string * string * string
    member ``Last Major Eruption``: string with get
    (let _,_,t3,_ = this in t3)

    member Location: string with get
    (let _,t2,_,_ = this in t2)

    member ``Type of Eruption``: string with get
    (let _,_,_,t4 = this in t4)

    member ``Volcano Name``: string with get
    (let t1,_,_,_ = this in t1)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TheMostBasicTable+Row : string * string * string * string
    member Column1: string with get
    (let t1,_,_,_ = this in t1)

    member Column2: string with get
    (let _,t2,_,_ = this in t2)

    member Column3: string with get
    (let _,_,t3,_ = this in t3)

    member Column4: string with get
    (let _,_,_,t4 = this in t4)


