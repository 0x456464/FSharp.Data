[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(false, "", "", false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "wimbledon_wikipedia.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, "", "", false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "wimbledon_wikipedia.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, "", "", false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(false, "", "", false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "wimbledon_wikipedia.html")))

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(false, "", "", false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(false, "", "", false, reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(false, "", "", false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(false, "", "", false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TableContainer with get
    this


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TableContainer : FDR.TypedHtmlDocument
    member ``Current champions``: HtmlProvider+CurrentChampions with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Event", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Champion", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Runner-up", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Score", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Current champions")

    member ``Ranking points``: HtmlProvider+RankingPoints with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("ATP", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("WTA", TextRuntime.ConvertInteger("", value), value))
    HtmlTable<_>.Create(rowConverter, this, "Ranking points")

    member Records: HtmlProvider+Records with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Record", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Era", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Player(s)", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Count", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Winning years", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Records")

    member ``See also``: HtmlProvider+SeeAlso with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "See also")

    member Table1: HtmlProvider+Table1 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("The Championships, Wimbledon", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("The Championships, Wimbledon 2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table1")

    member Table35: HtmlProvider+Table35 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Column3", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertInteger("", value), value),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[4]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[5]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[6]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[7]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[8]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[9]))))
    HtmlTable<_>.Create(rowConverter, this, "Table35")

    member Table36: HtmlProvider+Table36 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Column3", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertInteger("", value), value),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[4]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[5]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[6]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[7]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[8]))),
                                        TextRuntime.OptionToNullable(TextRuntime.ConvertInteger("", TextConversions.AsString(row.[9]))))
    HtmlTable<_>.Create(rowConverter, this, "Table36")

    member Table38: HtmlProvider+Table38 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Tennis", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Tennis2", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Tennis3", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table38")

    member Table44: HtmlProvider+Table44 with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("All England Lawn Tennis and Croquet Club", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("All England Lawn Tennis and Croquet Club 2", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Table44")

    member ``Trophies and prize money``: HtmlProvider+TrophiesAndPrizeMoney with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Result", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Prize money", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Increase from 2012", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Trophies and prize money")


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+CurrentChampions : FDR.HtmlTable<HtmlProvider+CurrentChampions+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+RankingPoints : FDR.HtmlTable<HtmlProvider+RankingPoints+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Records : FDR.HtmlTable<HtmlProvider+Records+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+SeeAlso : FDR.HtmlTable<HtmlProvider+SeeAlso+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table1 : FDR.HtmlTable<HtmlProvider+Table1+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table35 : FDR.HtmlTable<HtmlProvider+Table35+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table36 : FDR.HtmlTable<HtmlProvider+Table36+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table38 : FDR.HtmlTable<HtmlProvider+Table38+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table44 : FDR.HtmlTable<HtmlProvider+Table44+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TrophiesAndPrizeMoney : FDR.HtmlTable<HtmlProvider+TrophiesAndPrizeMoney+Row>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+CurrentChampions+Row : string * string * string * string
    member Champion: string with get
    (let _,t2,_,_ = this in t2)

    member Event: string with get
    (let t1,_,_,_ = this in t1)

    member Runner-up: string with get
    (let _,_,t3,_ = this in t3)

    member Score: string with get
    (let _,_,_,t4 = this in t4)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+RankingPoints+Row : string * int * int
    member ATP: int with get
    (let _,t2,_ = this in t2)

    member Column1: string with get
    (let t1,_,_ = this in t1)

    member WTA: int with get
    (let _,_,t3 = this in t3)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Records+Row : string * string * string * string * string
    member Count: string with get
    (let _,_,_,t4,_ = this in t4)

    member Era: string with get
    (let _,t2,_,_,_ = this in t2)

    member Player(s): string with get
    (let _,_,t3,_,_ = this in t3)

    member Record: string with get
    (let t1,_,_,_,_ = this in t1)

    member ``Winning years``: string with get
    (let _,_,_,_,t5 = this in t5)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+SeeAlso+Row : string * string
    member Column1: string with get
    (let t1,_ = this in t1)

    member Column2: string with get
    (let _,t2 = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table1+Row : string * string
    member ``The Championships, Wimbledon``: string with get
    (let t1,_ = this in t1)

    member ``The Championships, Wimbledon 2``: string with get
    (let _,t2 = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table35+Row : int * int * int * int * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int>
    member 1968: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,_,t9,_ = this in t9)

    member 1969: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,_,_,t10 = this in t10)

    member Column1: int with get
    (let t1,_,_,_,_,_,_,_,_,_ = this in t1)

    member Column2: int with get
    (let _,t2,_,_,_,_,_,_,_,_ = this in t2)

    member Column3: int with get
    (let _,_,t3,_,_,_,_,_,_,_ = this in t3)

    member Column4: int with get
    (let _,_,_,t4,_,_,_,_,_,_ = this in t4)

    member Column5: System.Nullable<int> with get
    (let _,_,_,_,t5,_,_,_,_,_ = this in t5)

    member Column6: System.Nullable<int> with get
    (let _,_,_,_,_,t6,_,_,_,_ = this in t6)

    member Column7: System.Nullable<int> with get
    (let _,_,_,_,_,_,t7,_,_,_ = this in t7)

    member Column8: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,t8,_,_ = this in t8)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table36+Row : int * int * int * int * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int> * System.Nullable<int>
    member 1968: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,_,t9,_ = this in t9)

    member 1969: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,_,_,t10 = this in t10)

    member Column1: int with get
    (let t1,_,_,_,_,_,_,_,_,_ = this in t1)

    member Column2: int with get
    (let _,t2,_,_,_,_,_,_,_,_ = this in t2)

    member Column3: int with get
    (let _,_,t3,_,_,_,_,_,_,_ = this in t3)

    member Column4: int with get
    (let _,_,_,t4,_,_,_,_,_,_ = this in t4)

    member Column5: System.Nullable<int> with get
    (let _,_,_,_,t5,_,_,_,_,_ = this in t5)

    member Column6: System.Nullable<int> with get
    (let _,_,_,_,_,t6,_,_,_,_ = this in t6)

    member Column7: System.Nullable<int> with get
    (let _,_,_,_,_,_,t7,_,_,_ = this in t7)

    member Column8: System.Nullable<int> with get
    (let _,_,_,_,_,_,_,t8,_,_ = this in t8)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table38+Row : string * string * string
    member Tennis: string with get
    (let t1,_,_ = this in t1)

    member Tennis2: string with get
    (let _,t2,_ = this in t2)

    member Tennis3: string with get
    (let _,_,t3 = this in t3)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+Table44+Row : string * string
    member ``All England Lawn Tennis and Croquet Club``: string with get
    (let t1,_ = this in t1)

    member ``All England Lawn Tennis and Croquet Club 2``: string with get
    (let _,t2 = this in t2)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+TrophiesAndPrizeMoney+Row : string * string * string
    member ``Increase from 2012``: string with get
    (let _,_,t3 = this in t3)

    member ``Prize money``: string with get
    (let _,t2,_ = this in t2)

    member Result: string with get
    (let t1,_,_ = this in t1)


