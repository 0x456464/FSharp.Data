class HtmlProvider : FDR.TypedHtmlDocument
    new : () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "wimbledon_wikipedia.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "wimbledon_wikipedia.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> TypedHtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" uri), f)

    static member GetSample: () -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "wimbledon_wikipedia.html")))

    static member Load: stream:System.IO.Stream -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    TypedHtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    TypedHtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" uri)))

    static member Parse: text:string -> HtmlProvider
    TypedHtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))

    member Tables: HtmlProvider+TableContainer with get
    this


class HtmlProvider+TableContainer : FDR.TypedHtmlDocument
    member CurrentChampionsEdit: HtmlProvider+CurrentChampionsEdit with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Event", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Champion", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Runner-up", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Score", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Current champions [ edit ]")

    member RankingPointsEdit: HtmlProvider+RankingPointsEdit with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("ATP", TextRuntime.ConvertInteger("", value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("WTA", TextRuntime.ConvertInteger("", value), value))
    HtmlTable<_>.Create(rowConverter, this, "Ranking points [ edit ]")

    member RecordsEdit: HtmlProvider+RecordsEdit with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Record", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Era", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Player(s)", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[3])
                                        TextRuntime.GetNonOptionalValue("Count", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[4])
                                        TextRuntime.GetNonOptionalValue("Winning years", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Records [ edit ]")

    member SeeAlsoEdit: HtmlProvider+SeeAlsoEdit with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Column0", TextRuntime.ConvertFloat("", "NaN,NA,#N/A,:", value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "See also [ edit ]")

    member TheChampionshipsWimbledon: HtmlProvider+TheChampionshipsWimbledon with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("The Championships, Wimbledon", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("The Championships, Wimbledon", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "The Championships, Wimbledon")

    member TrophiesAndPrizeMoneyEdit: HtmlProvider+TrophiesAndPrizeMoneyEdit with get
    let rowConverter = new Func<_,_>(fun (row:string[]) -> 
                                        let value = TextConversions.AsString(row.[0])
                                        TextRuntime.GetNonOptionalValue("Result", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[1])
                                        TextRuntime.GetNonOptionalValue("Prize money", TextRuntime.ConvertString(value), value),
                                        let value = TextConversions.AsString(row.[2])
                                        TextRuntime.GetNonOptionalValue("Increase from 2012", TextRuntime.ConvertString(value), value))
    HtmlTable<_>.Create(rowConverter, this, "Trophies and prize money [ edit ]")


class HtmlProvider+CurrentChampionsEdit : FDR.HtmlTable<HtmlProvider+CurrentChampionsEdit+Row>

class HtmlProvider+RankingPointsEdit : FDR.HtmlTable<HtmlProvider+RankingPointsEdit+Row>

class HtmlProvider+RecordsEdit : FDR.HtmlTable<HtmlProvider+RecordsEdit+Row>

class HtmlProvider+SeeAlsoEdit : FDR.HtmlTable<HtmlProvider+SeeAlsoEdit+Row>

class HtmlProvider+TheChampionshipsWimbledon : FDR.HtmlTable<HtmlProvider+TheChampionshipsWimbledon+Row>

class HtmlProvider+TrophiesAndPrizeMoneyEdit : FDR.HtmlTable<HtmlProvider+TrophiesAndPrizeMoneyEdit+Row>

class HtmlProvider+CurrentChampionsEdit+Row : string * string * string * string
    member Champion: string with get
    (let _,t2,_,_ = this in t2)

    member Event: string with get
    (let t1,_,_,_ = this in t1)

    member Runner-up: string with get
    (let _,_,t3,_ = this in t3)

    member Score: string with get
    (let _,_,_,t4 = this in t4)


class HtmlProvider+RankingPointsEdit+Row : string * int * int
    member : string with get
    (let t1,_,_ = this in t1)

    member ATP: int with get
    (let _,t2,_ = this in t2)

    member WTA: int with get
    (let _,_,t3 = this in t3)


class HtmlProvider+RecordsEdit+Row : string * string * string * string * string
    member Count: string with get
    (let _,_,_,t4,_ = this in t4)

    member Era: string with get
    (let _,t2,_,_,_ = this in t2)

    member Player(s): string with get
    (let _,_,t3,_,_ = this in t3)

    member Record: string with get
    (let t1,_,_,_,_ = this in t1)

    member Winning years: string with get
    (let _,_,_,_,t5 = this in t5)


class HtmlProvider+SeeAlsoEdit+Row : float * string
    member Column0: float with get
    (let t1,_ = this in t1)

    member Column1: string with get
    (let _,t2 = this in t2)


class HtmlProvider+TheChampionshipsWimbledon+Row : string * string
    member The Championships, Wimbledon: string with get
    (let t1,_ = this in t1)

    member The Championships, Wimbledon: string with get
    (let _,t2 = this in t2)


class HtmlProvider+TrophiesAndPrizeMoneyEdit+Row : string * string * string
    member Increase from 2012: string with get
    (let _,_,t3 = this in t3)

    member Prize money: string with get
    (let _,t2,_ = this in t2)

    member Result: string with get
    (let t1,_,_ = this in t1)


