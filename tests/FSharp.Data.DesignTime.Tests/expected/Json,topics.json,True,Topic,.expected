class JsonProvider
    static member AsyncLoad: uri:string -> JsonProvider+Topic[] async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonRuntime.ConvertArray(JsonDocument.Create(t, ""), new Func<_,_>(id))))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri), f)

    static member Load: stream:System.IO.Stream -> JsonProvider+Topic[]
    JsonRuntime.ConvertArray(JsonDocument.Create(((new StreamReader(stream)) :> TextReader), ""), new Func<_,_>(id)))

    static member Load: reader:System.IO.TextReader -> JsonProvider+Topic[]
    JsonRuntime.ConvertArray(JsonDocument.Create(reader, ""), new Func<_,_>(id)))

    static member Load: uri:string -> JsonProvider+Topic[]
    JsonRuntime.ConvertArray(JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri)), ""), new Func<_,_>(id)))

    static member Parse: text:string -> JsonProvider+Topic[]
    JsonRuntime.ConvertArray(JsonDocument.Create(((new StringReader(text)) :> TextReader), ""), new Func<_,_>(id)))


class JsonProvider+Topic : FDR.IJsonDocument
    new : categories:JsonProvider+Category[] -> categoryIds:string[] -> courseIds:int[] -> courses:JsonProvider+Course[] -> display:bool -> id:int -> instructor:string option -> language:string -> largeIcon:string -> name:string -> photo:string -> previewLink:string option -> selfServiceCourseId:int option -> shortDescription:string -> shortName:string -> smallIcon:string -> smallIconHover:string -> universities:JsonProvider+University[] -> universityIds:string[] -> universityLogo:string option -> video:string option -> visibility:int option -> subtitleLanguagesCsv:string option -> JsonProvider+Topic
    JsonRuntime.CreateObject([| ("categories",
                                 (categories :> obj))
                                ("category-ids",
                                 (categoryIds :> obj))
                                ("course-ids",
                                 (courseIds :> obj))
                                ("courses",
                                 (courses :> obj))
                                ("display",
                                 (display :> obj))
                                ("id",
                                 (id :> obj))
                                ("instructor",
                                 (instructor :> obj))
                                ("language",
                                 (language :> obj))
                                ("large_icon",
                                 (largeIcon :> obj))
                                ("name",
                                 (name :> obj))
                                ("photo",
                                 (photo :> obj))
                                ("preview_link",
                                 (previewLink :> obj))
                                ("self_service_course_id",
                                 (selfServiceCourseId :> obj))
                                ("short_description",
                                 (shortDescription :> obj))
                                ("short_name",
                                 (shortName :> obj))
                                ("small_icon",
                                 (smallIcon :> obj))
                                ("small_icon_hover",
                                 (smallIconHover :> obj))
                                ("universities",
                                 (universities :> obj))
                                ("university-ids",
                                 (universityIds :> obj))
                                ("university_logo",
                                 (universityLogo :> obj))
                                ("video",
                                 (video :> obj))
                                ("visibility",
                                 (visibility :> obj))
                                ("subtitle_languages_csv",
                                 (subtitleLanguagesCsv :> obj)) |], "")

    member Categories: JsonProvider+Category[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "categories"), new Func<_,_>(id)))

    member CategoryIds: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "category-ids"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member CourseIds: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "course-ids"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Courses: JsonProvider+Course[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "courses"), new Func<_,_>(id)))

    member Display: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "display")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Instructor: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "instructor"))

    member Language: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "language")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LargeIcon: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "large_icon")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Photo: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "photo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PreviewLink: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "preview_link"))

    member SelfServiceCourseId: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "self_service_course_id"))

    member ShortDescription: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ShortName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SmallIcon: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "small_icon")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SmallIconHover: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "small_icon_hover")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SubtitleLanguagesCsv: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "subtitle_languages_csv"))

    member Universities: JsonProvider+University[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "universities"), new Func<_,_>(id)))

    member UniversityIds: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "university-ids"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member UniversityLogo: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "university_logo"))

    member Video: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "video"))

    member Visibility: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "visibility"))


class JsonProvider+Category : FDR.IJsonDocument
    new : description:string option -> id:int -> mailingListId:int option -> name:string -> shortName:string -> JsonProvider+Category
    JsonRuntime.CreateObject([| ("description",
                                 (description :> obj))
                                ("id",
                                 (id :> obj))
                                ("mailing_list_id",
                                 (mailingListId :> obj))
                                ("name",
                                 (name :> obj))
                                ("short_name",
                                 (shortName :> obj)) |], "")

    member Description: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "description"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member MailingListId: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "mailing_list_id"))

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ShortName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Course : FDR.IJsonDocument
    new : aceCloseDate:JsonValue -> aceOpenDate:JsonValue -> aceSemesterHours:JsonValue -> aceTrackPriceDisplay:JsonValue -> active:bool -> authReviewCompletionDate:JsonValue -> certificateDescription:string option -> certificatesReady:bool -> cheggSessionId:JsonValue -> creatorId:int option -> deployed:bool -> durationString:string option -> eligibleForAce:bool option -> eligibleForCertificates:bool -> eligibleForSignatureTrack:bool -> endDate:JsonValue -> gradesReleaseDate:System.DateTime option -> gradingPolicyDistinction:string option -> gradingPolicyNormal:string option -> homeLink:string option -> id:int -> instructors:int[] -> name:JsonProvider+IntOrString -> notifiedSubscribers:bool -> proctoredExamCompletionDate:JsonValue -> record:JsonProvider+Record -> signatureTrackCertificateCombinedSignature:JsonValue -> signatureTrackCertificateDesignId:JsonValue -> signatureTrackCertificateSignatureBlurb:JsonValue -> signatureTrackCloseTime:System.DateTime option -> signatureTrackLastChanceTime:System.DateTime option -> signatureTrackOpenTime:System.DateTime option -> signatureTrackPrice:int option -> signatureTrackRegistrationOpen:bool -> signatureTrackRegularPrice:int option -> startDate:System.DateTime option -> startDateString:JsonProvider+StringOrDateTime -> startDay:int option -> startMonth:int option -> startYear:int option -> statementDesignId:int option -> status:bool -> textbooks:JsonValue[] -> topicId:int -> universityLogo:JsonValue -> JsonProvider+Course
    JsonRuntime.CreateObject([| ("ace_close_date",
                                 (aceCloseDate :> obj))
                                ("ace_open_date",
                                 (aceOpenDate :> obj))
                                ("ace_semester_hours",
                                 (aceSemesterHours :> obj))
                                ("ace_track_price_display",
                                 (aceTrackPriceDisplay :> obj))
                                ("active",
                                 (active :> obj))
                                ("auth_review_completion_date",
                                 (authReviewCompletionDate :> obj))
                                ("certificate_description",
                                 (certificateDescription :> obj))
                                ("certificates_ready",
                                 (certificatesReady :> obj))
                                ("chegg_session_id",
                                 (cheggSessionId :> obj))
                                ("creator_id",
                                 (creatorId :> obj))
                                ("deployed",
                                 (deployed :> obj))
                                ("duration_string",
                                 (durationString :> obj))
                                ("eligible_for_ACE",
                                 (eligibleForAce :> obj))
                                ("eligible_for_certificates",
                                 (eligibleForCertificates :> obj))
                                ("eligible_for_signature_track",
                                 (eligibleForSignatureTrack :> obj))
                                ("end_date",
                                 (endDate :> obj))
                                ("grades_release_date",
                                 (gradesReleaseDate :> obj))
                                ("grading_policy_distinction",
                                 (gradingPolicyDistinction :> obj))
                                ("grading_policy_normal",
                                 (gradingPolicyNormal :> obj))
                                ("home_link",
                                 (homeLink :> obj))
                                ("id",
                                 (id :> obj))
                                ("instructors",
                                 (instructors :> obj))
                                ("name",
                                 (name :> obj))
                                ("notified_subscribers",
                                 (notifiedSubscribers :> obj))
                                ("proctored_exam_completion_date",
                                 (proctoredExamCompletionDate :> obj))
                                ("record",
                                 (record :> obj))
                                ("signature_track_certificate_combined_signature",
                                 (signatureTrackCertificateCombinedSignature :> obj))
                                ("signature_track_certificate_design_id",
                                 (signatureTrackCertificateDesignId :> obj))
                                ("signature_track_certificate_signature_blurb",
                                 (signatureTrackCertificateSignatureBlurb :> obj))
                                ("signature_track_close_time",
                                 (signatureTrackCloseTime :> obj))
                                ("signature_track_last_chance_time",
                                 (signatureTrackLastChanceTime :> obj))
                                ("signature_track_open_time",
                                 (signatureTrackOpenTime :> obj))
                                ("signature_track_price",
                                 (signatureTrackPrice :> obj))
                                ("signature_track_registration_open",
                                 (signatureTrackRegistrationOpen :> obj))
                                ("signature_track_regular_price",
                                 (signatureTrackRegularPrice :> obj))
                                ("start_date",
                                 (startDate :> obj))
                                ("start_date_string",
                                 (startDateString :> obj))
                                ("start_day",
                                 (startDay :> obj))
                                ("start_month",
                                 (startMonth :> obj))
                                ("start_year",
                                 (startYear :> obj))
                                ("statement_design_id",
                                 (statementDesignId :> obj))
                                ("status",
                                 (status :> obj))
                                ("textbooks",
                                 (textbooks :> obj))
                                ("topic_id",
                                 (topicId :> obj))
                                ("university_logo",
                                 (universityLogo :> obj)) |], "")

    member AceCloseDate: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "ace_close_date")

    member AceOpenDate: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "ace_open_date")

    member AceSemesterHours: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "ace_semester_hours")

    member AceTrackPriceDisplay: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "ace_track_price_display")

    member Active: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "active")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member AuthReviewCompletionDate: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "auth_review_completion_date")

    member CertificateDescription: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "certificate_description"))

    member CertificatesReady: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "certificates_ready")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member CheggSessionId: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "chegg_session_id")

    member CreatorId: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "creator_id"))

    member Deployed: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "deployed")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member DurationString: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "duration_string"))

    member EligibleForAce: bool option with get
    JsonRuntime.ConvertBoolean("", JsonRuntime.TryGetPropertyUnpacked(this, "eligible_for_ACE"))

    member EligibleForCertificates: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "eligible_for_certificates")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member EligibleForSignatureTrack: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "eligible_for_signature_track")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member EndDate: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "end_date")

    member GradesReleaseDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "grades_release_date"))

    member GradingPolicyDistinction: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "grading_policy_distinction"))

    member GradingPolicyNormal: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "grading_policy_normal"))

    member HomeLink: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "home_link"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Instructors: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "instructors"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Name: JsonProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "name")

    member NotifiedSubscribers: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "notified_subscribers")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member ProctoredExamCompletionDate: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "proctored_exam_completion_date")

    member Record: JsonProvider+Record with get
    JsonRuntime.GetPropertyPacked(this, "record")

    member SignatureTrackCertificateCombinedSignature: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "signature_track_certificate_combined_signature")

    member SignatureTrackCertificateDesignId: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "signature_track_certificate_design_id")

    member SignatureTrackCertificateSignatureBlurb: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "signature_track_certificate_signature_blurb")

    member SignatureTrackCloseTime: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "signature_track_close_time"))

    member SignatureTrackLastChanceTime: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "signature_track_last_chance_time"))

    member SignatureTrackOpenTime: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "signature_track_open_time"))

    member SignatureTrackPrice: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "signature_track_price"))

    member SignatureTrackRegistrationOpen: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track_registration_open")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member SignatureTrackRegularPrice: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "signature_track_regular_price"))

    member StartDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "start_date"))

    member StartDateString: JsonProvider+StringOrDateTime with get
    JsonRuntime.GetPropertyPackedOrNull(this, "start_date_string")

    member StartDay: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "start_day"))

    member StartMonth: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "start_month"))

    member StartYear: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "start_year"))

    member StatementDesignId: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "statement_design_id"))

    member Status: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Textbooks: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "textbooks"), new Func<_,_>(id)))

    member TopicId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "topic_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member UniversityLogo: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "university_logo")


class JsonProvider+University : FDR.IJsonDocument
    new : abbrName:string -> backgroundColor:JsonValue -> banner:string option -> chinaMirror:int option -> classLogo:string option -> description:string option -> display:bool -> favicon:string option -> homeLink:string option -> id:int -> landingPageBanner:string option -> location:string option -> locationCity:string option -> locationCountry:string option -> locationLat:decimal option -> locationLng:decimal option -> locationState:string option -> logo:string option -> mailingListId:JsonValue -> name:string -> partnerType:int -> primaryColor:string option -> rectangularLogoSvg:string option -> shortName:string -> squareLogo:string option -> squareLogoSource:string option -> squareLogoSvg:string option -> website:string option -> websiteFacebook:string option -> websiteTwitter:string option -> websiteYoutube:string option -> wordmark:JsonValue -> JsonProvider+University
    JsonRuntime.CreateObject([| ("abbr_name",
                                 (abbrName :> obj))
                                ("background_color",
                                 (backgroundColor :> obj))
                                ("banner",
                                 (banner :> obj))
                                ("china_mirror",
                                 (chinaMirror :> obj))
                                ("class_logo",
                                 (classLogo :> obj))
                                ("description",
                                 (description :> obj))
                                ("display",
                                 (display :> obj))
                                ("favicon",
                                 (favicon :> obj))
                                ("home_link",
                                 (homeLink :> obj))
                                ("id",
                                 (id :> obj))
                                ("landing_page_banner",
                                 (landingPageBanner :> obj))
                                ("location",
                                 (location :> obj))
                                ("location_city",
                                 (locationCity :> obj))
                                ("location_country",
                                 (locationCountry :> obj))
                                ("location_lat",
                                 (locationLat :> obj))
                                ("location_lng",
                                 (locationLng :> obj))
                                ("location_state",
                                 (locationState :> obj))
                                ("logo",
                                 (logo :> obj))
                                ("mailing_list_id",
                                 (mailingListId :> obj))
                                ("name",
                                 (name :> obj))
                                ("partner_type",
                                 (partnerType :> obj))
                                ("primary_color",
                                 (primaryColor :> obj))
                                ("rectangular_logo_svg",
                                 (rectangularLogoSvg :> obj))
                                ("short_name",
                                 (shortName :> obj))
                                ("square_logo",
                                 (squareLogo :> obj))
                                ("square_logo_source",
                                 (squareLogoSource :> obj))
                                ("square_logo_svg",
                                 (squareLogoSvg :> obj))
                                ("website",
                                 (website :> obj))
                                ("website_facebook",
                                 (websiteFacebook :> obj))
                                ("website_twitter",
                                 (websiteTwitter :> obj))
                                ("website_youtube",
                                 (websiteYoutube :> obj))
                                ("wordmark",
                                 (wordmark :> obj)) |], "")

    member AbbrName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "abbr_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member BackgroundColor: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "background_color")

    member Banner: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "banner"))

    member ChinaMirror: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "china_mirror"))

    member ClassLogo: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "class_logo"))

    member Description: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "description"))

    member Display: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "display")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Favicon: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "favicon"))

    member HomeLink: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "home_link"))

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member LandingPageBanner: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "landing_page_banner"))

    member Location: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "location"))

    member LocationCity: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "location_city"))

    member LocationCountry: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "location_country"))

    member LocationLat: decimal option with get
    JsonRuntime.ConvertDecimal("", JsonRuntime.TryGetPropertyUnpacked(this, "location_lat"))

    member LocationLng: decimal option with get
    JsonRuntime.ConvertDecimal("", JsonRuntime.TryGetPropertyUnpacked(this, "location_lng"))

    member LocationState: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "location_state"))

    member Logo: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "logo"))

    member MailingListId: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "mailing_list_id")

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PartnerType: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "partner_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member PrimaryColor: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "primary_color"))

    member RectangularLogoSvg: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "rectangular_logo_svg"))

    member ShortName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SquareLogo: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "square_logo"))

    member SquareLogoSource: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "square_logo_source"))

    member SquareLogoSvg: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "square_logo_svg"))

    member Website: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "website"))

    member WebsiteFacebook: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "website_facebook"))

    member WebsiteTwitter: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "website_twitter"))

    member WebsiteYoutube: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "website_youtube"))

    member Wordmark: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "wordmark")


class JsonProvider+IntOrString : FDR.IJsonDocument
    new : number:int -> JsonProvider+IntOrString
    JsonRuntime.CreateObject((number :> obj), "")

    new : string:string -> JsonProvider+IntOrString
    JsonRuntime.CreateObject((string :> obj), "")

    new : () -> JsonProvider+IntOrString
    JsonRuntime.CreateObject(null, "")

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+Record : FDR.IJsonDocument
    new : aceGrade:int -> achievementLevel:int option -> authenticatedOverall:bool -> gradeDistinction:decimal option -> gradeNormal:decimal option -> isEnrolledForProctoredExam:bool -> passedAce:bool -> shareForWork:bool option -> signatureTrack:bool -> verifyCertId:JsonValue -> withGradeCertId:JsonValue -> JsonProvider+Record
    JsonRuntime.CreateObject([| ("ace_grade",
                                 (aceGrade :> obj))
                                ("achievement_level",
                                 (achievementLevel :> obj))
                                ("authenticated_overall",
                                 (authenticatedOverall :> obj))
                                ("grade_distinction",
                                 (gradeDistinction :> obj))
                                ("grade_normal",
                                 (gradeNormal :> obj))
                                ("is_enrolled_for_proctored_exam",
                                 (isEnrolledForProctoredExam :> obj))
                                ("passed_ace",
                                 (passedAce :> obj))
                                ("share_for_work",
                                 (shareForWork :> obj))
                                ("signature_track",
                                 (signatureTrack :> obj))
                                ("verify_cert_id",
                                 (verifyCertId :> obj))
                                ("with_grade_cert_id",
                                 (withGradeCertId :> obj)) |], "")

    member AceGrade: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "ace_grade")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member AchievementLevel: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "achievement_level"))

    member AuthenticatedOverall: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "authenticated_overall")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member GradeDistinction: decimal option with get
    JsonRuntime.ConvertDecimal("", JsonRuntime.TryGetPropertyUnpacked(this, "grade_distinction"))

    member GradeNormal: decimal option with get
    JsonRuntime.ConvertDecimal("", JsonRuntime.TryGetPropertyUnpacked(this, "grade_normal"))

    member IsEnrolledForProctoredExam: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "is_enrolled_for_proctored_exam")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member PassedAce: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "passed_ace")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member ShareForWork: bool option with get
    JsonRuntime.ConvertBoolean("", JsonRuntime.TryGetPropertyUnpacked(this, "share_for_work"))

    member SignatureTrack: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member VerifyCertId: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "verify_cert_id")

    member WithGradeCertId: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "with_grade_cert_id")


class JsonProvider+StringOrDateTime : FDR.IJsonDocument
    new : string:string -> JsonProvider+StringOrDateTime
    JsonRuntime.CreateObject((string :> obj), "")

    new : dateTime:System.DateTime -> JsonProvider+StringOrDateTime
    JsonRuntime.CreateObject((dateTime :> obj), "")

    new : () -> JsonProvider+StringOrDateTime
    JsonRuntime.CreateObject(null, "")

    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertDateTime("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


