class XmlProvider : obj
    static member AsyncGetSample: () -> XmlProvider+Authors async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "Philosophy.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Authors async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri), f)

    static member GetSample: () -> XmlProvider+Authors
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "Philosophy.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Authors
    let stream = stream
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Authors
    let reader = reader
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Authors
    let uri = uri
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri)))

    static member Parse: text:string -> XmlProvider+Authors
    let text = text
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Authors : FDR.BaseTypes.XmlElement
    new : authors:XmlProvider+Author[] -> XmlProvider+Authors
    let this = authors
    XmlRuntime.CreateRecord("authors", 
                            [| |], 
                            [| ("author",
                                (this :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Authors
    let this = xElement
    XmlElement.Create(this)

    member Authors: XmlProvider+Author[] with get
    let this = this
    XmlRuntime.ConvertArray(this, "author", new Func<_,_>(id)))


class XmlProvider+Author : FDR.BaseTypes.XmlElement
    new : name:string -> surname:string -> birth:int option -> books:XmlProvider+Book[] -> manuscript:XmlProvider+Manuscript option -> XmlProvider+Author
    let this = name
    let name = surname
    let surname = birth
    let birth = books
    let books = manuscript
    XmlRuntime.CreateRecord("author", 
                            [| ("name",
                                (this :> obj))
                               ("surname",
                                (name :> obj))
                               ("birth",
                                (surname :> obj)) |], 
                            [| ("book",
                                (birth :> obj))
                               ("manuscript",
                                (books :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Author
    let this = xElement
    XmlElement.Create(this)

    member Birth: int option with get
    let this = this
    TextRuntime.ConvertInteger("", XmlRuntime.TryGetAttribute(this, "birth"))

    member Books: XmlProvider+Book[] with get
    let this = this
    XmlRuntime.ConvertArray(this, "book", new Func<_,_>(id)))

    member Manuscript: XmlProvider+Manuscript option with get
    let this = this
    XmlRuntime.ConvertOptional(this, "manuscript", new Func<_,_>(id)))

    member Name: string with get
    let this = this
    let value = XmlRuntime.TryGetAttribute(this, "name")
    TextRuntime.GetNonOptionalValue("Attribute name", TextRuntime.ConvertString(value), value)

    member Surname: string with get
    let this = this
    let value = XmlRuntime.TryGetAttribute(this, "surname")
    TextRuntime.GetNonOptionalValue("Attribute surname", TextRuntime.ConvertString(value), value)


class XmlProvider+Book : FDR.BaseTypes.XmlElement
    new : title:string -> XmlProvider+Book
    let this = title
    XmlRuntime.CreateRecord("book", 
                            [| ("title",
                                (this :> obj)) |], 
                            [| |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Book
    let this = xElement
    XmlElement.Create(this)

    member Title: string with get
    let this = this
    let value = XmlRuntime.TryGetAttribute(this, "title")
    TextRuntime.GetNonOptionalValue("Attribute title", TextRuntime.ConvertString(value), value)


class XmlProvider+Manuscript : FDR.BaseTypes.XmlElement
    new : title:string -> XmlProvider+Manuscript
    let this = title
    XmlRuntime.CreateRecord("manuscript", 
                            [| ("title",
                                (this :> obj)) |], 
                            [| |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Manuscript
    let this = xElement
    XmlElement.Create(this)

    member Title: string with get
    let this = this
    let value = XmlRuntime.TryGetAttribute(this, "title")
    TextRuntime.GetNonOptionalValue("Attribute title", TextRuntime.ConvertString(value), value)


