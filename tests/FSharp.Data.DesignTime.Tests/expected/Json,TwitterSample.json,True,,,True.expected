class JsonProvider : obj
    static member AsyncGetSamples: () -> JsonProvider+Root[] async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.CreateList(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "TwitterSample.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSamples: () -> JsonProvider+Root[]
    JsonDocument.CreateList(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "TwitterSample.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    let stream = stream
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    let reader = reader
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    let uri = uri
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    let text = text
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : createdAt:string option -> id:int64 option -> idStr:int64 option -> text:string option -> source:string option -> truncated:bool option -> inReplyToStatusId:int64 option -> inReplyToStatusIdStr:int64 option -> inReplyToUserId:int option -> inReplyToUserIdStr:int option -> inReplyToScreenName:string option -> user:JsonProvider+User option -> geo:JsonValue -> coordinates:JsonValue -> place:JsonProvider+Place option -> contributors:JsonValue -> retweetedStatus:JsonProvider+RetweetedStatus option -> retweetCount:int option -> favoriteCount:int option -> entities:JsonProvider+Entities2 option -> favorited:bool option -> retweeted:bool option -> filterLevel:string option -> possiblySensitive:bool option -> lang:string option -> delete:JsonProvider+Delete option -> JsonProvider+Root
    let this = createdAt
    let createdAt = id
    let id = idStr
    let idStr = text
    let text = source
    let source = truncated
    let truncated = inReplyToStatusId
    let inReplyToStatusId = inReplyToStatusIdStr
    let inReplyToStatusIdStr = inReplyToUserId
    let inReplyToUserId = inReplyToUserIdStr
    let inReplyToUserIdStr = inReplyToScreenName
    let inReplyToScreenName = user
    let user = geo
    let geo = coordinates
    let coordinates = place
    let place = contributors
    let contributors = retweetedStatus
    let retweetedStatus = retweetCount
    let retweetCount = favoriteCount
    let favoriteCount = entities
    let entities = favorited
    let favorited = retweeted
    let retweeted = filterLevel
    let filterLevel = possiblySensitive
    let possiblySensitive = lang
    let lang = delete
    JsonRuntime.CreateRecord([| ("created_at",
                                 (this :> obj))
                                ("id",
                                 (createdAt :> obj))
                                ("id_str",
                                 (id :> obj))
                                ("text",
                                 (idStr :> obj))
                                ("source",
                                 (text :> obj))
                                ("truncated",
                                 (source :> obj))
                                ("in_reply_to_status_id",
                                 (truncated :> obj))
                                ("in_reply_to_status_id_str",
                                 (inReplyToStatusId :> obj))
                                ("in_reply_to_user_id",
                                 (inReplyToStatusIdStr :> obj))
                                ("in_reply_to_user_id_str",
                                 (inReplyToUserId :> obj))
                                ("in_reply_to_screen_name",
                                 (inReplyToUserIdStr :> obj))
                                ("user",
                                 (inReplyToScreenName :> obj))
                                ("geo",
                                 (user :> obj))
                                ("coordinates",
                                 (geo :> obj))
                                ("place",
                                 (coordinates :> obj))
                                ("contributors",
                                 (place :> obj))
                                ("retweeted_status",
                                 (contributors :> obj))
                                ("retweet_count",
                                 (retweetedStatus :> obj))
                                ("favorite_count",
                                 (retweetCount :> obj))
                                ("entities",
                                 (favoriteCount :> obj))
                                ("favorited",
                                 (entities :> obj))
                                ("retweeted",
                                 (favorited :> obj))
                                ("filter_level",
                                 (retweeted :> obj))
                                ("possibly_sensitive",
                                 (filterLevel :> obj))
                                ("lang",
                                 (possiblySensitive :> obj))
                                ("delete",
                                 (lang :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Contributors: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "contributors")

    member Coordinates: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "coordinates")

    member CreatedAt: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "created_at"))

    member Delete: JsonProvider+Delete option with get
    let this = this
    JsonRuntime.TryGetPropertyPacked(this, "delete")

    member Entities: JsonProvider+Entities2 option with get
    let this = this
    JsonRuntime.TryGetPropertyPacked(this, "entities")

    member FavoriteCount: int option with get
    let this = this
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "favorite_count"))

    member Favorited: bool option with get
    let this = this
    JsonRuntime.ConvertBoolean(JsonRuntime.TryGetPropertyUnpacked(this, "favorited"))

    member FilterLevel: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "filter_level"))

    member Geo: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "geo")

    member Id: int64 option with get
    let this = this
    JsonRuntime.ConvertInteger64("", JsonRuntime.TryGetPropertyUnpacked(this, "id"))

    member IdStr: int64 option with get
    let this = this
    JsonRuntime.ConvertInteger64("", JsonRuntime.TryGetPropertyUnpacked(this, "id_str"))

    member InReplyToScreenName: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_screen_name"))

    member InReplyToStatusId: int64 option with get
    let this = this
    JsonRuntime.ConvertInteger64("", JsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_status_id"))

    member InReplyToStatusIdStr: int64 option with get
    let this = this
    JsonRuntime.ConvertInteger64("", JsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_status_id_str"))

    member InReplyToUserId: int option with get
    let this = this
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_user_id"))

    member InReplyToUserIdStr: int option with get
    let this = this
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_user_id_str"))

    member Lang: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "lang"))

    member Place: JsonProvider+Place option with get
    let this = this
    JsonRuntime.TryGetPropertyPacked(this, "place")

    member PossiblySensitive: bool option with get
    let this = this
    JsonRuntime.ConvertBoolean(JsonRuntime.TryGetPropertyUnpacked(this, "possibly_sensitive"))

    member RetweetCount: int option with get
    let this = this
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "retweet_count"))

    member Retweeted: bool option with get
    let this = this
    JsonRuntime.ConvertBoolean(JsonRuntime.TryGetPropertyUnpacked(this, "retweeted"))

    member RetweetedStatus: JsonProvider+RetweetedStatus option with get
    let this = this
    JsonRuntime.TryGetPropertyPacked(this, "retweeted_status")

    member Source: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "source"))

    member Text: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "text"))

    member Truncated: bool option with get
    let this = this
    JsonRuntime.ConvertBoolean(JsonRuntime.TryGetPropertyUnpacked(this, "truncated"))

    member User: JsonProvider+User option with get
    let this = this
    JsonRuntime.TryGetPropertyPacked(this, "user")


class JsonProvider+Delete : FDR.BaseTypes.IJsonDocument
    new : status:JsonProvider+Status -> JsonProvider+Delete
    let this = status
    JsonRuntime.CreateRecord([| ("status",
                                 (this :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Delete
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Status: JsonProvider+Status with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "status")


class JsonProvider+Entities2 : FDR.BaseTypes.IJsonDocument
    new : hashtags:JsonProvider+Hashtag[] -> symbols:JsonValue[] -> urls:JsonProvider+Url[] -> userMentions:JsonProvider+UserMention[] -> JsonProvider+Entities2
    let this = hashtags
    let hashtags = symbols
    let symbols = urls
    let urls = userMentions
    JsonRuntime.CreateRecord([| ("hashtags",
                                 (this :> obj))
                                ("symbols",
                                 (hashtags :> obj))
                                ("urls",
                                 (symbols :> obj))
                                ("user_mentions",
                                 (urls :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Entities2
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Hashtags: JsonProvider+Hashtag[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "hashtags"), new Func<_,_>(id)))

    member Symbols: FDR.BaseTypes.IJsonDocument[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "symbols"), new Func<_,_>(id)))

    member Urls: JsonProvider+Url[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "urls"), new Func<_,_>(id)))

    member UserMentions: JsonProvider+UserMention[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "user_mentions"), new Func<_,_>(id)))


class JsonProvider+Place : FDR.BaseTypes.IJsonDocument
    new : id:string -> url:string -> placeType:string -> name:string -> fullName:string -> countryCode:string -> country:string -> boundingBox:JsonProvider+BoundingBox -> attributes:JsonProvider+Attributes -> JsonProvider+Place
    let this = id
    let id = url
    let url = placeType
    let placeType = name
    let name = fullName
    let fullName = countryCode
    let countryCode = country
    let country = boundingBox
    let boundingBox = attributes
    JsonRuntime.CreateRecord([| ("id",
                                 (this :> obj))
                                ("url",
                                 (id :> obj))
                                ("place_type",
                                 (url :> obj))
                                ("name",
                                 (placeType :> obj))
                                ("full_name",
                                 (name :> obj))
                                ("country_code",
                                 (fullName :> obj))
                                ("country",
                                 (countryCode :> obj))
                                ("bounding_box",
                                 (country :> obj))
                                ("attributes",
                                 (boundingBox :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Place
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Attributes: JsonProvider+Attributes with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "attributes")

    member BoundingBox: JsonProvider+BoundingBox with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "bounding_box")

    member Country: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "country")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CountryCode: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "country_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FullName: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "full_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PlaceType: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "place_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+RetweetedStatus : FDR.BaseTypes.IJsonDocument
    new : createdAt:string -> id:int64 -> idStr:int64 -> text:string -> source:string -> truncated:bool -> inReplyToStatusId:JsonValue -> inReplyToStatusIdStr:JsonValue -> inReplyToUserId:int option -> inReplyToUserIdStr:int option -> inReplyToScreenName:string option -> user:JsonProvider+User2 -> geo:JsonValue -> coordinates:JsonValue -> place:JsonValue -> contributors:JsonValue -> retweetCount:int -> favoriteCount:int -> entities:JsonProvider+Entities -> favorited:bool -> retweeted:bool -> lang:string -> possiblySensitive:bool option -> JsonProvider+RetweetedStatus
    let this = createdAt
    let createdAt = id
    let id = idStr
    let idStr = text
    let text = source
    let source = truncated
    let truncated = inReplyToStatusId
    let inReplyToStatusId = inReplyToStatusIdStr
    let inReplyToStatusIdStr = inReplyToUserId
    let inReplyToUserId = inReplyToUserIdStr
    let inReplyToUserIdStr = inReplyToScreenName
    let inReplyToScreenName = user
    let user = geo
    let geo = coordinates
    let coordinates = place
    let place = contributors
    let contributors = retweetCount
    let retweetCount = favoriteCount
    let favoriteCount = entities
    let entities = favorited
    let favorited = retweeted
    let retweeted = lang
    let lang = possiblySensitive
    JsonRuntime.CreateRecord([| ("created_at",
                                 (this :> obj))
                                ("id",
                                 (createdAt :> obj))
                                ("id_str",
                                 (id :> obj))
                                ("text",
                                 (idStr :> obj))
                                ("source",
                                 (text :> obj))
                                ("truncated",
                                 (source :> obj))
                                ("in_reply_to_status_id",
                                 (truncated :> obj))
                                ("in_reply_to_status_id_str",
                                 (inReplyToStatusId :> obj))
                                ("in_reply_to_user_id",
                                 (inReplyToStatusIdStr :> obj))
                                ("in_reply_to_user_id_str",
                                 (inReplyToUserId :> obj))
                                ("in_reply_to_screen_name",
                                 (inReplyToUserIdStr :> obj))
                                ("user",
                                 (inReplyToScreenName :> obj))
                                ("geo",
                                 (user :> obj))
                                ("coordinates",
                                 (geo :> obj))
                                ("place",
                                 (coordinates :> obj))
                                ("contributors",
                                 (place :> obj))
                                ("retweet_count",
                                 (contributors :> obj))
                                ("favorite_count",
                                 (retweetCount :> obj))
                                ("entities",
                                 (favoriteCount :> obj))
                                ("favorited",
                                 (entities :> obj))
                                ("retweeted",
                                 (favorited :> obj))
                                ("lang",
                                 (retweeted :> obj))
                                ("possibly_sensitive",
                                 (lang :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+RetweetedStatus
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Contributors: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "contributors")

    member Coordinates: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "coordinates")

    member CreatedAt: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Entities: JsonProvider+Entities with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "entities")

    member FavoriteCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favorite_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Favorited: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favorited")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Geo: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "geo")

    member Id: int64 with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member IdStr: int64 with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member InReplyToScreenName: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_screen_name"))

    member InReplyToStatusId: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "in_reply_to_status_id")

    member InReplyToStatusIdStr: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "in_reply_to_status_id_str")

    member InReplyToUserId: int option with get
    let this = this
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_user_id"))

    member InReplyToUserIdStr: int option with get
    let this = this
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "in_reply_to_user_id_str"))

    member Lang: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "lang")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Place: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "place")

    member PossiblySensitive: bool option with get
    let this = this
    JsonRuntime.ConvertBoolean(JsonRuntime.TryGetPropertyUnpacked(this, "possibly_sensitive"))

    member RetweetCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "retweet_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Retweeted: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "retweeted")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Source: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "source")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Truncated: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "truncated")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member User: JsonProvider+User2 with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "user")


class JsonProvider+User : FDR.BaseTypes.IJsonDocument
    new : id:int -> idStr:int -> name:string -> screenName:string -> location:string option -> url:string option -> description:string -> protected:bool -> followersCount:int -> friendsCount:int -> listedCount:int -> createdAt:string -> favouritesCount:int -> utcOffset:int option -> timeZone:string option -> geoEnabled:bool -> verified:bool -> statusesCount:int -> lang:string -> contributorsEnabled:bool -> isTranslator:bool -> profileBackgroundColor:JsonProvider+IntOrString -> profileBackgroundImageUrl:string -> profileBackgroundImageUrlHttps:string -> profileBackgroundTile:bool -> profileImageUrl:string -> profileImageUrlHttps:string -> profileBannerUrl:string option -> profileLinkColor:JsonProvider+IntOrString -> profileSidebarBorderColor:JsonProvider+IntOrString -> profileSidebarFillColor:JsonProvider+IntOrString -> profileTextColor:JsonProvider+IntOrString -> profileUseBackgroundImage:bool -> defaultProfile:bool -> defaultProfileImage:bool -> following:JsonValue -> followRequestSent:JsonValue -> notifications:JsonValue -> JsonProvider+User
    let this = id
    let id = idStr
    let idStr = name
    let name = screenName
    let screenName = location
    let location = url
    let url = description
    let description = protected
    let protected = followersCount
    let followersCount = friendsCount
    let friendsCount = listedCount
    let listedCount = createdAt
    let createdAt = favouritesCount
    let favouritesCount = utcOffset
    let utcOffset = timeZone
    let timeZone = geoEnabled
    let geoEnabled = verified
    let verified = statusesCount
    let statusesCount = lang
    let lang = contributorsEnabled
    let contributorsEnabled = isTranslator
    let isTranslator = profileBackgroundColor
    let profileBackgroundColor = profileBackgroundImageUrl
    let profileBackgroundImageUrl = profileBackgroundImageUrlHttps
    let profileBackgroundImageUrlHttps = profileBackgroundTile
    let profileBackgroundTile = profileImageUrl
    let profileImageUrl = profileImageUrlHttps
    let profileImageUrlHttps = profileBannerUrl
    let profileBannerUrl = profileLinkColor
    let profileLinkColor = profileSidebarBorderColor
    let profileSidebarBorderColor = profileSidebarFillColor
    let profileSidebarFillColor = profileTextColor
    let profileTextColor = profileUseBackgroundImage
    let profileUseBackgroundImage = defaultProfile
    let defaultProfile = defaultProfileImage
    let defaultProfileImage = following
    let following = followRequestSent
    let followRequestSent = notifications
    JsonRuntime.CreateRecord([| ("id",
                                 (this :> obj))
                                ("id_str",
                                 (id :> obj))
                                ("name",
                                 (idStr :> obj))
                                ("screen_name",
                                 (name :> obj))
                                ("location",
                                 (screenName :> obj))
                                ("url",
                                 (location :> obj))
                                ("description",
                                 (url :> obj))
                                ("protected",
                                 (description :> obj))
                                ("followers_count",
                                 (protected :> obj))
                                ("friends_count",
                                 (followersCount :> obj))
                                ("listed_count",
                                 (friendsCount :> obj))
                                ("created_at",
                                 (listedCount :> obj))
                                ("favourites_count",
                                 (createdAt :> obj))
                                ("utc_offset",
                                 (favouritesCount :> obj))
                                ("time_zone",
                                 (utcOffset :> obj))
                                ("geo_enabled",
                                 (timeZone :> obj))
                                ("verified",
                                 (geoEnabled :> obj))
                                ("statuses_count",
                                 (verified :> obj))
                                ("lang",
                                 (statusesCount :> obj))
                                ("contributors_enabled",
                                 (lang :> obj))
                                ("is_translator",
                                 (contributorsEnabled :> obj))
                                ("profile_background_color",
                                 (isTranslator :> obj))
                                ("profile_background_image_url",
                                 (profileBackgroundColor :> obj))
                                ("profile_background_image_url_https",
                                 (profileBackgroundImageUrl :> obj))
                                ("profile_background_tile",
                                 (profileBackgroundImageUrlHttps :> obj))
                                ("profile_image_url",
                                 (profileBackgroundTile :> obj))
                                ("profile_image_url_https",
                                 (profileImageUrl :> obj))
                                ("profile_banner_url",
                                 (profileImageUrlHttps :> obj))
                                ("profile_link_color",
                                 (profileBannerUrl :> obj))
                                ("profile_sidebar_border_color",
                                 (profileLinkColor :> obj))
                                ("profile_sidebar_fill_color",
                                 (profileSidebarBorderColor :> obj))
                                ("profile_text_color",
                                 (profileSidebarFillColor :> obj))
                                ("profile_use_background_image",
                                 (profileTextColor :> obj))
                                ("default_profile",
                                 (profileUseBackgroundImage :> obj))
                                ("default_profile_image",
                                 (defaultProfile :> obj))
                                ("following",
                                 (defaultProfileImage :> obj))
                                ("follow_request_sent",
                                 (following :> obj))
                                ("notifications",
                                 (followRequestSent :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+User
    let this = jsonValue
    JsonDocument.Create(this, "")

    member ContributorsEnabled: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "contributors_enabled")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member CreatedAt: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member DefaultProfile: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "default_profile")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member DefaultProfileImage: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "default_profile_image")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FavouritesCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favourites_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FollowRequestSent: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "follow_request_sent")

    member FollowersCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "followers_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Following: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "following")

    member FriendsCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "friends_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member GeoEnabled: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "geo_enabled")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IdStr: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IsTranslator: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "is_translator")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Lang: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "lang")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ListedCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "listed_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Location: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "location"))

    member Name: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Notifications: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "notifications")

    member ProfileBackgroundColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_background_color")

    member ProfileBackgroundImageUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_image_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileBackgroundImageUrlHttps: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_image_url_https")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileBackgroundTile: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_tile")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member ProfileBannerUrl: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "profile_banner_url"))

    member ProfileImageUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_image_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileImageUrlHttps: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_image_url_https")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileLinkColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_link_color")

    member ProfileSidebarBorderColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_sidebar_border_color")

    member ProfileSidebarFillColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_sidebar_fill_color")

    member ProfileTextColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_text_color")

    member ProfileUseBackgroundImage: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_use_background_image")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Protected: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "protected")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member ScreenName: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "screen_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member StatusesCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "statuses_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TimeZone: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "time_zone"))

    member Url: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "url"))

    member UtcOffset: int option with get
    let this = this
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "utc_offset"))

    member Verified: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "verified")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)


class JsonProvider+Attributes : FDR.BaseTypes.IJsonDocument
    new : () -> JsonProvider+Attributes
    JsonRuntime.CreateRecord([| |], "")

    new : jsonValue:JsonValue -> JsonProvider+Attributes
    let this = jsonValue
    JsonDocument.Create(this, "")


class JsonProvider+BoundingBox : FDR.BaseTypes.IJsonDocument
    new : type:string -> coordinates:decimal[][][] -> JsonProvider+BoundingBox
    let this = type
    let type = coordinates
    JsonRuntime.CreateRecord([| ("type",
                                 (this :> obj))
                                ("coordinates",
                                 (type :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+BoundingBox
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Coordinates: decimal[][][] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "coordinates"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertDecimal("", Some t.JsonValue), Some t.JsonValue)))))))

    member Type: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Entities : FDR.BaseTypes.IJsonDocument
    new : hashtags:JsonProvider+Hashtag[] -> symbols:JsonValue[] -> urls:JsonProvider+Url[] -> userMentions:JsonProvider+UserMention[] -> media:JsonProvider+Media[] -> JsonProvider+Entities
    let this = hashtags
    let hashtags = symbols
    let symbols = urls
    let urls = userMentions
    let userMentions = media
    JsonRuntime.CreateRecord([| ("hashtags",
                                 (this :> obj))
                                ("symbols",
                                 (hashtags :> obj))
                                ("urls",
                                 (symbols :> obj))
                                ("user_mentions",
                                 (urls :> obj))
                                ("media",
                                 (userMentions :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Entities
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Hashtags: JsonProvider+Hashtag[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "hashtags"), new Func<_,_>(id)))

    member Media: JsonProvider+Media[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "media"), new Func<_,_>(id)))

    member Symbols: FDR.BaseTypes.IJsonDocument[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "symbols"), new Func<_,_>(id)))

    member Urls: JsonProvider+Url[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "urls"), new Func<_,_>(id)))

    member UserMentions: JsonProvider+UserMention[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "user_mentions"), new Func<_,_>(id)))


class JsonProvider+Hashtag : FDR.BaseTypes.IJsonDocument
    new : text:string -> indices:int[] -> JsonProvider+Hashtag
    let this = text
    let text = indices
    JsonRuntime.CreateRecord([| ("text",
                                 (this :> obj))
                                ("indices",
                                 (text :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Hashtag
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Indices: int[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "indices"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Text: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+IntOrString : FDR.BaseTypes.IJsonDocument
    new : number:int -> JsonProvider+IntOrString
    let this = number
    JsonRuntime.CreateValue((this :> obj), "")

    new : string:string -> JsonProvider+IntOrString
    let this = string
    JsonRuntime.CreateValue((this :> obj), "")

    new : () -> JsonProvider+IntOrString
    JsonRuntime.CreateValue(null, "")

    new : jsonValue:JsonValue -> JsonProvider+IntOrString
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Number: int option with get
    let this = this
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    let this = this
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+Status : FDR.BaseTypes.IJsonDocument
    new : id:int64 -> userId:int -> idStr:int64 -> userIdStr:int -> JsonProvider+Status
    let this = id
    let id = userId
    let userId = idStr
    let idStr = userIdStr
    JsonRuntime.CreateRecord([| ("id",
                                 (this :> obj))
                                ("user_id",
                                 (id :> obj))
                                ("id_str",
                                 (userId :> obj))
                                ("user_id_str",
                                 (idStr :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Status
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Id: int64 with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member IdStr: int64 with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member UserId: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "user_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member UserIdStr: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "user_id_str")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Url : FDR.BaseTypes.IJsonDocument
    new : url:string -> expandedUrl:string -> displayUrl:string -> indices:int[] -> JsonProvider+Url
    let this = url
    let url = expandedUrl
    let expandedUrl = displayUrl
    let displayUrl = indices
    JsonRuntime.CreateRecord([| ("url",
                                 (this :> obj))
                                ("expanded_url",
                                 (url :> obj))
                                ("display_url",
                                 (expandedUrl :> obj))
                                ("indices",
                                 (displayUrl :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Url
    let this = jsonValue
    JsonDocument.Create(this, "")

    member DisplayUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "display_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExpandedUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expanded_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Indices: int[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "indices"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Url: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+User2 : FDR.BaseTypes.IJsonDocument
    new : id:int -> idStr:int -> name:string -> screenName:string -> location:string option -> url:string option -> description:string -> protected:bool -> followersCount:int -> friendsCount:int -> listedCount:int -> createdAt:string -> favouritesCount:int -> utcOffset:int option -> timeZone:string option -> geoEnabled:bool -> verified:bool -> statusesCount:int -> lang:string -> contributorsEnabled:bool -> isTranslator:bool -> profileBackgroundColor:JsonProvider+IntOrString -> profileBackgroundImageUrl:string -> profileBackgroundImageUrlHttps:string -> profileBackgroundTile:bool -> profileImageUrl:string -> profileImageUrlHttps:string -> profileBannerUrl:string option -> profileLinkColor:string -> profileSidebarBorderColor:JsonProvider+IntOrString -> profileSidebarFillColor:JsonProvider+IntOrString -> profileTextColor:JsonProvider+IntOrString -> profileUseBackgroundImage:bool -> defaultProfile:bool -> defaultProfileImage:bool -> following:JsonValue -> followRequestSent:JsonValue -> notifications:JsonValue -> JsonProvider+User2
    let this = id
    let id = idStr
    let idStr = name
    let name = screenName
    let screenName = location
    let location = url
    let url = description
    let description = protected
    let protected = followersCount
    let followersCount = friendsCount
    let friendsCount = listedCount
    let listedCount = createdAt
    let createdAt = favouritesCount
    let favouritesCount = utcOffset
    let utcOffset = timeZone
    let timeZone = geoEnabled
    let geoEnabled = verified
    let verified = statusesCount
    let statusesCount = lang
    let lang = contributorsEnabled
    let contributorsEnabled = isTranslator
    let isTranslator = profileBackgroundColor
    let profileBackgroundColor = profileBackgroundImageUrl
    let profileBackgroundImageUrl = profileBackgroundImageUrlHttps
    let profileBackgroundImageUrlHttps = profileBackgroundTile
    let profileBackgroundTile = profileImageUrl
    let profileImageUrl = profileImageUrlHttps
    let profileImageUrlHttps = profileBannerUrl
    let profileBannerUrl = profileLinkColor
    let profileLinkColor = profileSidebarBorderColor
    let profileSidebarBorderColor = profileSidebarFillColor
    let profileSidebarFillColor = profileTextColor
    let profileTextColor = profileUseBackgroundImage
    let profileUseBackgroundImage = defaultProfile
    let defaultProfile = defaultProfileImage
    let defaultProfileImage = following
    let following = followRequestSent
    let followRequestSent = notifications
    JsonRuntime.CreateRecord([| ("id",
                                 (this :> obj))
                                ("id_str",
                                 (id :> obj))
                                ("name",
                                 (idStr :> obj))
                                ("screen_name",
                                 (name :> obj))
                                ("location",
                                 (screenName :> obj))
                                ("url",
                                 (location :> obj))
                                ("description",
                                 (url :> obj))
                                ("protected",
                                 (description :> obj))
                                ("followers_count",
                                 (protected :> obj))
                                ("friends_count",
                                 (followersCount :> obj))
                                ("listed_count",
                                 (friendsCount :> obj))
                                ("created_at",
                                 (listedCount :> obj))
                                ("favourites_count",
                                 (createdAt :> obj))
                                ("utc_offset",
                                 (favouritesCount :> obj))
                                ("time_zone",
                                 (utcOffset :> obj))
                                ("geo_enabled",
                                 (timeZone :> obj))
                                ("verified",
                                 (geoEnabled :> obj))
                                ("statuses_count",
                                 (verified :> obj))
                                ("lang",
                                 (statusesCount :> obj))
                                ("contributors_enabled",
                                 (lang :> obj))
                                ("is_translator",
                                 (contributorsEnabled :> obj))
                                ("profile_background_color",
                                 (isTranslator :> obj))
                                ("profile_background_image_url",
                                 (profileBackgroundColor :> obj))
                                ("profile_background_image_url_https",
                                 (profileBackgroundImageUrl :> obj))
                                ("profile_background_tile",
                                 (profileBackgroundImageUrlHttps :> obj))
                                ("profile_image_url",
                                 (profileBackgroundTile :> obj))
                                ("profile_image_url_https",
                                 (profileImageUrl :> obj))
                                ("profile_banner_url",
                                 (profileImageUrlHttps :> obj))
                                ("profile_link_color",
                                 (profileBannerUrl :> obj))
                                ("profile_sidebar_border_color",
                                 (profileLinkColor :> obj))
                                ("profile_sidebar_fill_color",
                                 (profileSidebarBorderColor :> obj))
                                ("profile_text_color",
                                 (profileSidebarFillColor :> obj))
                                ("profile_use_background_image",
                                 (profileTextColor :> obj))
                                ("default_profile",
                                 (profileUseBackgroundImage :> obj))
                                ("default_profile_image",
                                 (defaultProfile :> obj))
                                ("following",
                                 (defaultProfileImage :> obj))
                                ("follow_request_sent",
                                 (following :> obj))
                                ("notifications",
                                 (followRequestSent :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+User2
    let this = jsonValue
    JsonDocument.Create(this, "")

    member ContributorsEnabled: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "contributors_enabled")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member CreatedAt: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member DefaultProfile: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "default_profile")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member DefaultProfileImage: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "default_profile_image")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FavouritesCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favourites_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FollowRequestSent: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "follow_request_sent")

    member FollowersCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "followers_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Following: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "following")

    member FriendsCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "friends_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member GeoEnabled: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "geo_enabled")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IdStr: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IsTranslator: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "is_translator")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Lang: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "lang")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ListedCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "listed_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Location: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "location"))

    member Name: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Notifications: FDR.BaseTypes.IJsonDocument with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "notifications")

    member ProfileBackgroundColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_background_color")

    member ProfileBackgroundImageUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_image_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileBackgroundImageUrlHttps: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_image_url_https")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileBackgroundTile: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_background_tile")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member ProfileBannerUrl: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "profile_banner_url"))

    member ProfileImageUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_image_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileImageUrlHttps: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_image_url_https")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileLinkColor: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_link_color")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProfileSidebarBorderColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_sidebar_border_color")

    member ProfileSidebarFillColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_sidebar_fill_color")

    member ProfileTextColor: JsonProvider+IntOrString with get
    let this = this
    JsonRuntime.GetPropertyPackedOrNull(this, "profile_text_color")

    member ProfileUseBackgroundImage: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "profile_use_background_image")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Protected: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "protected")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member ScreenName: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "screen_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member StatusesCount: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "statuses_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TimeZone: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "time_zone"))

    member Url: string option with get
    let this = this
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "url"))

    member UtcOffset: int option with get
    let this = this
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "utc_offset"))

    member Verified: bool with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "verified")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)


class JsonProvider+UserMention : FDR.BaseTypes.IJsonDocument
    new : screenName:string -> name:string -> id:int -> idStr:int -> indices:int[] -> JsonProvider+UserMention
    let this = screenName
    let screenName = name
    let name = id
    let id = idStr
    let idStr = indices
    JsonRuntime.CreateRecord([| ("screen_name",
                                 (this :> obj))
                                ("name",
                                 (screenName :> obj))
                                ("id",
                                 (name :> obj))
                                ("id_str",
                                 (id :> obj))
                                ("indices",
                                 (idStr :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+UserMention
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Id: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IdStr: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Indices: int[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "indices"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Name: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ScreenName: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "screen_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Media : FDR.BaseTypes.IJsonDocument
    new : id:int64 -> idStr:int64 -> indices:int[] -> mediaUrl:string -> mediaUrlHttps:string -> url:string -> displayUrl:string -> expandedUrl:string -> type:string -> sizes:JsonProvider+Sizes -> sourceStatusId:int64 -> sourceStatusIdStr:int64 -> JsonProvider+Media
    let this = id
    let id = idStr
    let idStr = indices
    let indices = mediaUrl
    let mediaUrl = mediaUrlHttps
    let mediaUrlHttps = url
    let url = displayUrl
    let displayUrl = expandedUrl
    let expandedUrl = type
    let type = sizes
    let sizes = sourceStatusId
    let sourceStatusId = sourceStatusIdStr
    JsonRuntime.CreateRecord([| ("id",
                                 (this :> obj))
                                ("id_str",
                                 (id :> obj))
                                ("indices",
                                 (idStr :> obj))
                                ("media_url",
                                 (indices :> obj))
                                ("media_url_https",
                                 (mediaUrl :> obj))
                                ("url",
                                 (mediaUrlHttps :> obj))
                                ("display_url",
                                 (url :> obj))
                                ("expanded_url",
                                 (displayUrl :> obj))
                                ("type",
                                 (expandedUrl :> obj))
                                ("sizes",
                                 (type :> obj))
                                ("source_status_id",
                                 (sizes :> obj))
                                ("source_status_id_str",
                                 (sourceStatusId :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Media
    let this = jsonValue
    JsonDocument.Create(this, "")

    member DisplayUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "display_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExpandedUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expanded_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int64 with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member IdStr: int64 with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id_str")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member Indices: int[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "indices"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member MediaUrl: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member MediaUrlHttps: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "media_url_https")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Sizes: JsonProvider+Sizes with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "sizes")

    member SourceStatusId: int64 with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "source_status_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member SourceStatusIdStr: int64 with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "source_status_id_str")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Sizes : FDR.BaseTypes.IJsonDocument
    new : small:JsonProvider+Small -> thumb:JsonProvider+Small -> large:JsonProvider+Small -> medium:JsonProvider+Small -> JsonProvider+Sizes
    let this = small
    let small = thumb
    let thumb = large
    let large = medium
    JsonRuntime.CreateRecord([| ("small",
                                 (this :> obj))
                                ("thumb",
                                 (small :> obj))
                                ("large",
                                 (thumb :> obj))
                                ("medium",
                                 (large :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Sizes
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Large: JsonProvider+Small with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "large")

    member Medium: JsonProvider+Small with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "medium")

    member Small: JsonProvider+Small with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "small")

    member Thumb: JsonProvider+Small with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "thumb")


class JsonProvider+Small : FDR.BaseTypes.IJsonDocument
    new : w:int -> h:int -> resize:string -> JsonProvider+Small
    let this = w
    let w = h
    let h = resize
    JsonRuntime.CreateRecord([| ("w",
                                 (this :> obj))
                                ("h",
                                 (w :> obj))
                                ("resize",
                                 (h :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Small
    let this = jsonValue
    JsonDocument.Create(this, "")

    member H: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "h")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Resize: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "resize")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member W: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "w")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


