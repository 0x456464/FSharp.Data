class JsonProvider : obj
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "DoubleNested.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "DoubleNested.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    let stream = stream
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    let reader = reader
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    let uri = uri
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    let text = text
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : main:JsonProvider+Main -> JsonProvider+Root
    let this = main
    JsonRuntime.CreateRecord([| ("main",
                                 (this :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Main: JsonProvider+Main with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "main")


class JsonProvider+Main : FDR.BaseTypes.IJsonDocument
    new : title:string -> nested:JsonProvider+Nested -> JsonProvider+Main
    let this = title
    let title = nested
    JsonRuntime.CreateRecord([| ("title",
                                 (this :> obj))
                                ("nested",
                                 (title :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Main
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Nested: JsonProvider+Nested with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "nested")

    member Title: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Nested : FDR.BaseTypes.IJsonDocument
    new : nestedTitle:string -> JsonProvider+Nested
    let this = nestedTitle
    JsonRuntime.CreateRecord([| ("nestedTitle",
                                 (this :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Nested
    let this = jsonValue
    JsonDocument.Create(this, "")

    member NestedTitle: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "nestedTitle")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


