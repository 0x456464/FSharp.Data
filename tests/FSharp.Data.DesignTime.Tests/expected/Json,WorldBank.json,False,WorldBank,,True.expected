class JsonProvider : obj
    static member AsyncGetSample: () -> JsonProvider+WorldBank async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "WorldBank.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+WorldBank async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+WorldBank
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "WorldBank.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+WorldBank
    let stream = stream
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+WorldBank
    let reader = reader
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+WorldBank
    let uri = uri
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)), "")

    static member Parse: text:string -> JsonProvider+WorldBank
    let text = text
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+WorldBank : FDR.BaseTypes.IJsonDocument
    new : array:JsonProvider+Record[] -> record:JsonProvider+Record2 -> JsonProvider+WorldBank
    let this = array
    let array = record
    JsonRuntime.CreateArray([| (this :> obj)
                               (array :> obj) |], "")

    new : jsonValue:JsonValue -> JsonProvider+WorldBank
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Array: JsonProvider+Record[] with get
    let this = this
    JsonRuntime.ConvertArray(JsonRuntime.GetArrayChildByTypeTag(this, "", "Array"), new Func<_,_>(id)))

    member Record: JsonProvider+Record2 with get
    let this = this
    JsonRuntime.GetArrayChildByTypeTag(this, "", "Record")


class JsonProvider+Record : FDR.BaseTypes.IJsonDocument
    new : indicator:JsonProvider+Indicator -> country:JsonProvider+Indicator -> value:decimal option -> decimal:int -> date:int -> JsonProvider+Record
    let this = indicator
    let indicator = country
    let country = value
    let value = decimal
    let decimal = date
    JsonRuntime.CreateRecord([| ("indicator",
                                 (this :> obj))
                                ("country",
                                 (indicator :> obj))
                                ("value",
                                 (country :> obj))
                                ("decimal",
                                 (value :> obj))
                                ("date",
                                 (decimal :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Record
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Country: JsonProvider+Indicator with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "country")

    member Date: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Decimal: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "decimal")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Indicator: JsonProvider+Indicator with get
    let this = this
    JsonRuntime.GetPropertyPacked(this, "indicator")

    member Value: decimal option with get
    let this = this
    JsonRuntime.ConvertDecimal("", JsonRuntime.TryGetPropertyUnpacked(this, "value"))


class JsonProvider+Record2 : FDR.BaseTypes.IJsonDocument
    new : page:int -> pages:int -> perPage:int -> total:int -> JsonProvider+Record2
    let this = page
    let page = pages
    let pages = perPage
    let perPage = total
    JsonRuntime.CreateRecord([| ("page",
                                 (this :> obj))
                                ("pages",
                                 (page :> obj))
                                ("per_page",
                                 (pages :> obj))
                                ("total",
                                 (perPage :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Record2
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Page: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Pages: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member PerPage: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "per_page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Total: int with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Indicator : FDR.BaseTypes.IJsonDocument
    new : id:string -> value:string -> JsonProvider+Indicator
    let this = id
    let id = value
    JsonRuntime.CreateRecord([| ("id",
                                 (this :> obj))
                                ("value",
                                 (id :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Indicator
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Id: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Value: string with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "value")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


