class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "JSON" "projects.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "JSON" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "JSON" "projects.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "JSON" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.IJsonDocument
    new : ordercontainer:JsonProvider+Ordercontainer -> JsonProvider+Root
    JsonRuntime.CreateObject([| ("ordercontainer",
                                 (ordercontainer :> obj)) |], "")

    member Ordercontainer: JsonProvider+Ordercontainer with get
    JsonRuntime.GetPropertyPacked(this, "ordercontainer")


class JsonProvider+Ordercontainer : FDR.IJsonDocument
    new : backgrounds:JsonProvider+Backgrounds -> project:JsonProvider+Background -> JsonProvider+Ordercontainer
    JsonRuntime.CreateObject([| ("backgrounds",
                                 (backgrounds :> obj))
                                ("project",
                                 (project :> obj)) |], "")

    member Backgrounds: JsonProvider+Backgrounds with get
    JsonRuntime.GetPropertyPacked(this, "backgrounds")

    member Project: JsonProvider+Background with get
    JsonRuntime.GetPropertyPacked(this, "project")


class JsonProvider+Background : FDR.IJsonDocument
    new : title:JsonProvider+Title -> JsonProvider+Background
    JsonRuntime.CreateObject([| ("title",
                                 (title :> obj)) |], "")

    member Title: JsonProvider+Title with get
    JsonRuntime.GetPropertyPacked(this, "title")


class JsonProvider+Backgrounds : FDR.IJsonDocument
    new : background:JsonProvider+Background -> JsonProvider+Backgrounds
    JsonRuntime.CreateObject([| ("background",
                                 (background :> obj)) |], "")

    member Background: JsonProvider+Background with get
    JsonRuntime.GetPropertyPacked(this, "background")


class JsonProvider+Title : FDR.IJsonDocument
    new : text:string -> JsonProvider+Title
    JsonRuntime.CreateObject([| ("text",
                                 (text :> obj)) |], "")

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


