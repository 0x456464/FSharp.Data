class XmlProvider : obj
    static member AsyncGetSamples: () -> XmlProvider+Item[] async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.CreateList(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "optionals1.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Item async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri), f)

    static member GetSamples: () -> XmlProvider+Item[]
    XmlElement.CreateList(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "optionals1.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Item
    let stream = stream
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Item
    let reader = reader
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Item
    let uri = uri
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri)))

    static member Parse: text:string -> XmlProvider+Item
    let text = text
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Item : FDR.BaseTypes.XmlElement
    new : title:string -> description:string option -> XmlProvider+Item
    let this = title
    let title = description
    XmlRuntime.CreateRecord("item", 
                            [| |], 
                            [| ("title",
                                (this :> obj))
                               ("description",
                                (title :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Item
    let this = xElement
    XmlElement.Create(this)

    member Description: string option with get
    let this = this
    XmlRuntime.ConvertOptional2(this, "description", new Func<_,_>(fun (t:XmlElement) -> TextRuntime.ConvertString(XmlRuntime.TryGetValue(t))))

    member Title: string with get
    let this = this
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "title"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


