class JsonProvider : obj
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "Dates.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let uri = uri
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "Dates.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    let stream = stream
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    let reader = reader
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    let uri = uri
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    let text = text
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : birthdate:System.DateTime -> anniversary:System.DateTime -> noTimeZone:System.DateTime -> utcTime:System.DateTime -> JsonProvider+Root
    let this = birthdate
    let birthdate = anniversary
    let anniversary = noTimeZone
    let noTimeZone = utcTime
    JsonRuntime.CreateRecord([| ("birthdate",
                                 (this :> obj))
                                ("anniversary",
                                 (birthdate :> obj))
                                ("NoTimeZone",
                                 (anniversary :> obj))
                                ("UtcTime",
                                 (noTimeZone :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    let this = jsonValue
    JsonDocument.Create(this, "")

    member Anniversary: System.DateTime with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "anniversary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Birthdate: System.DateTime with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "birthdate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member NoTimeZone: System.DateTime with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "NoTimeZone")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member UtcTime: System.DateTime with get
    let this = this
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "UtcTime")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)


