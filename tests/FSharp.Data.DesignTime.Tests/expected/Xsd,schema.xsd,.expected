class XsdProvider
    static member AsyncGetSample: () -> XsdProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" @"<RESOLUTION_FOLDER>" "XSD" "schema.xsd"), f)

    static member AsyncLoad: uri:string -> XsdProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" @"<RESOLUTION_FOLDER>" "XSD" uri), f)

    static member GetSample: () -> XsdProvider+Root
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" @"<RESOLUTION_FOLDER>" "XSD" "schema.xsd")))

    static member Load: stream:System.IO.Stream -> XsdProvider+Root
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XsdProvider+Root
    XmlElement.Create(reader)

    static member Load: uri:string -> XsdProvider+Root
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" @"<RESOLUTION_FOLDER>" "XSD" uri)))

    static member Parse: text:string -> XsdProvider+Root
    XmlElement.Create(((new StringReader(text)) :> TextReader))

    static member ParseRoot: text:string -> XsdProvider+Root
    XmlElement.Create(let t = text
                      let doc = XDocument.Parse(t)
                      let t = IfThenElse (Call (None, op_Equality,
                  [Call (Some (Call (Some (Call (Some (Call (Some (doc),
                                                             get_Root, [])),
                                                 get_Name, [])), get_LocalName,
                                     [])), ToLower, []), Value ("root")]),
            Let (newRoot,
                 NewObject (XElement,
                            Call (Some (Call (Some (Call (Some (Call (Some (doc),
                                                                      get_Root,
                                                                      [])),
                                                          get_Name, [])),
                                              get_Namespace, [])), GetName,
                                  [Value ("root__")])),
                 Sequential (Call (Some (newRoot), Add,
                                   [Coerce (Call (Some (doc), get_Root, []),
                                            Object)]),
                             Let (newDoc,
                                  NewObject (XDocument,
                                             Call (Some (doc), get_Declaration,
                                                   []), NewArray (Object)),
                                  Sequential (Call (Some (newDoc), Add,
                                                    [Coerce (newRoot, Object)]),
                                              Call (Some (doc), ToString, []))))),
            t)
                      ((new StringReader(t)) :> TextReader))


class XsdProvider+Root : FDR.XmlElement
    member AnonymousTyped: XsdProvider+AnonymousTyped with get
    XmlRuntime.GetChild(this, "anonymousTyped")

    member Attr: string with get
    let value = XmlRuntime.TryGetAttribute(this, "attr")
    TextRuntime.GetNonOptionalValue("Attribute attr", TextRuntime.ConvertString(value), value)

    member Covert: bool with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "covert"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertBoolean("da-DK", value), value)

    member Windy: string with get
    let value = XmlRuntime.TryGetAttribute(this, "windy")
    TextRuntime.GetNonOptionalValue("Attribute windy", TextRuntime.ConvertString(value), value)


class XsdProvider+AnonymousTyped : FDR.XmlElement
    member Attr: string with get
    let value = XmlRuntime.TryGetAttribute(this, "attr")
    TextRuntime.GetNonOptionalValue("Attribute attr", TextRuntime.ConvertString(value), value)

    member Covert: bool with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "covert"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertBoolean("da-DK", value), value)

    member Windy: string with get
    let value = XmlRuntime.TryGetAttribute(this, "windy")
    TextRuntime.GetNonOptionalValue("Attribute windy", TextRuntime.ConvertString(value), value)


